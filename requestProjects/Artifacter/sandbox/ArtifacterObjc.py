import os
import io
import unicodedata
from pathlib import Path
from decimal import Decimal, ROUND_HALF_UP
import json
import itertools
import concurrent.futures
import urllib.request
from collections import Counter

from PIL import Image, ImageFont, ImageDraw, ImageEnhance
from PIL import ImageFile

from ArtifacterResource_Font import ArtifactFont
from ArtifacterResource_Image import artifact_assets, artifact_base_image, artifact_emotes, artifact_rarelity, artifact_constellation, artifact_grades

from objc_util import ObjCClass, ObjCInstance, create_objc_class, on_main_thread
from objc_util import sel, CGRect

import pdbg

ImageFile.LOAD_TRUNCATED_IMAGES = True

UsrAgn = 'Mozilla/5.0 (Linux; U; Android 8.0; en-la; Nexus Build/JPG991) AppleWebKit/511.2 (KHTML, like Gecko) Version/5.0 Mobile/11S444 YJApp-ANDROID jp.co.yahoo.android.yjtop/4.01.1.5'


class Artifacter(object):

  def __init__(self, uid):
    self.uid = uid
    self.ArtifactFont = ArtifactFont
    self.artifact_assets = artifact_assets
    self.artifact_base_image = artifact_base_image
    self.artifact_emotes = artifact_emotes
    self.artifact_rarelity = artifact_rarelity
    self.artifact_constellation = artifact_constellation
    self.artifact_grades = artifact_grades

    self.UserName = ''
    self.WorldLank = ''
    self.name_level_list = []

    concurrent.futures.ThreadPoolExecutor().submit(
      self.Initialization).result()
    # todo: `main` も同時に実行
    concurrent.futures.ThreadPoolExecutor().submit(self.main).result()

  def Initialization(self):
    self.locale_jp = concurrent.futures.ThreadPoolExecutor().submit(
      self.locale).result()  # データの表記名データをEnka.Network公式Githubから取得
    self.characters_json = concurrent.futures.ThreadPoolExecutor().submit(
      self.character_json).result()  # キャラクターデータをEnka.Network公式Githubから取得
    self.costumes = concurrent.futures.ThreadPoolExecutor().submit(
      self.costume_json).result()
    try:
      self.player_data = json.loads(
        urllib.request.urlopen(
          urllib.request.Request(
            'https://enka.network/api/uid/{}'.format(self.uid),
            headers={'User-Agent': UsrAgn})).read().decode(errors='ignore'))
    except:
      self.player_data = {}

  def mainoption(self):  # 聖遺物のメインオプション情報
    return {
      "会心ダメージ": {
        "21.8": [[6.2, 7.8, 7.8], [5.4, 5.4, 5.4, 5.4]],
        "22.5": [[7.0, 7.8, 7.8], [5.4, 5.4, 5.4, 6.2]],
        "23.3": [[7.8, 7.8, 7.8], [5.4, 5.4, 5.4, 7.0]],
        "27.2": [[5.4, 6.2, 7.8, 7.8], [5.4, 5.4, 5.4, 5.4, 5.4]],
        "28.0": [[5.4, 7.0, 7.8, 7.8], [5.4, 5.4, 5.4, 5.4, 6.2]],
        "28.8": [[5.4, 7.8, 7.8, 7.8], [5.4, 5.4, 5.4, 5.4, 7.0]],
        "29.5": [[6.2, 7.8, 7.8, 7.8], [5.4, 5.4, 5.4, 5.4, 7.8]],
        "30.3": [[7.0, 7.8, 7.8, 7.8], [5.4, 5.4, 5.4, 6.2, 7.8]],
        "31.1": [[7.8, 7.8, 7.8, 7.8], [5.4, 5.4, 5.4, 7.0, 7.8]],
        "32.6": [[5.4, 5.4, 6.2, 7.8, 7.8], [5.4, 5.4, 5.4, 5.4, 5.4, 5.4]],
        "33.4": [[5.4, 5.4, 7.0, 7.8, 7.8], [5.4, 5.4, 5.4, 5.4, 5.4, 6.2]],
        "34.2": [[5.4, 5.4, 7.8, 7.8, 7.8], [5.4, 5.4, 5.4, 5.4, 5.4, 7.0]],
        "35.0": [[5.4, 6.2, 7.8, 7.8, 7.8], [5.4, 5.4, 5.4, 5.4, 5.4, 7.8]],
        "35.7": [[5.4, 7.0, 7.8, 7.8, 7.8], [5.4, 5.4, 5.4, 5.4, 7.0, 7.0]],
        "36.5": [[5.4, 7.8, 7.8, 7.8, 7.8], [5.4, 5.4, 5.4, 5.4, 7.0, 7.8]],
        "35.8": [[6.2, 6.2, 7.8, 7.8, 7.8], [5.4, 5.4, 5.4, 5.4, 6.2, 7.8]],
        "37.3": [[6.2, 7.8, 7.8, 7.8, 7.8], [5.4, 5.4, 5.4, 5.4, 7.8, 7.8]],
        "38.1": [[7.0, 7.8, 7.8, 7.8, 7.8], [5.4, 5.4, 5.4, 6.2, 7.8, 7.8]],
        "38.8": [[7.8, 7.8, 7.8, 7.8, 7.8], [5.4, 5.4, 7.0, 7.0, 7.0, 7.0]],
        "ov": [
          "21.8", "22.5", "23.3", "27.2", "28.0", "28.8", "29.5", "30.3",
          "31.1", "32.6", "33.4", "34.2", "35.0", "35.7", "36.5", "35.8",
          "37.3", "38.1", "38.8"
        ]
      },
      "会心率": {
        "10.9": [[3.1, 3.9, 3.9], [2.7, 2.7, 2.7, 2.7]],
        "11.3": [[3.5, 3.9, 3.9], [2.7, 2.7, 2.7, 3.1]],
        "11.7": [[3.9, 3.9, 3.9], [2.7, 2.7, 2.7, 3.5]],
        "13.6": [[2.7, 3.1, 3.9, 3.9], [2.7, 2.7, 2.7, 2.7, 2.7]],
        "14.0": [[2.7, 3.5, 3.9, 3.9], [2.7, 2.7, 2.7, 2.7, 3.1]],
        "14.4": [[2.7, 3.9, 3.9, 3.9], [2.7, 2.7, 2.7, 2.7, 3.5]],
        "14.8": [[3.1, 3.9, 3.9, 3.9], [2.7, 2.7, 2.7, 2.7, 3.9]],
        "15.2": [[3.5, 3.9, 3.9, 3.9], [2.7, 2.7, 2.7, 3.1, 3.9]],
        "15.6": [[3.9, 3.9, 3.9, 3.9], [2.7, 2.7, 2.7, 3.5, 3.9]],
        "16.3": [[2.7, 2.7, 3.1, 3.9, 3.9], [2.7, 2.7, 2.7, 2.7, 2.7, 2.7]],
        "16.7": [[2.7, 2.7, 3.5, 3.9, 3.9], [2.7, 2.7, 2.7, 2.7, 2.7, 3.1]],
        "17.1": [[2.7, 2.7, 3.9, 3.9, 3.9], [2.7, 2.7, 2.7, 2.7, 2.7, 3.5]],
        "17.5": [[2.7, 3.1, 3.9, 3.9, 3.9], [2.7, 2.7, 2.7, 2.7, 2.7, 3.9]],
        "17.9": [[2.7, 3.5, 3.9, 3.9, 3.9], [2.7, 2.7, 2.7, 2.7, 3.1, 3.9]],
        "18.3": [[2.7, 3.9, 3.9, 3.9, 3.9], [2.7, 2.7, 2.7, 2.7, 3.5, 3.9]],
        "18.7": [[3.1, 3.9, 3.9, 3.9, 3.9], [2.7, 2.7, 2.7, 2.7, 3.9, 3.9]],
        "19.1": [[3.5, 3.9, 3.9, 3.9, 3.9], [2.7, 2.7, 2.7, 3.1, 3.9, 3.9]],
        "ov": [
          "10.9", "11.3", "11.7", "13.6", "14.0", "14.4", "14.8", "15.2",
          "15.6", "16.3", "16.7", "17.1", "17.5", "17.9", "18.3", "18.7",
          "19.1"
        ]
      },
      "元素チャージ効率": {
        "18.1": [[5.2, 6.5, 6.5], [4.5, 4.5, 4.5, 4.5]],
        "18.8": [[5.8, 6.5, 6.5], [4.5, 4.5, 4.5, 5.2]],
        "19.4": [[6.5, 6.5, 6.5], [4.5, 4.5, 4.5, 5.8]],
        "22.7": [[4.5, 5.2, 6.5, 6.5], [4.5, 4.5, 4.5, 4.5, 4.5]],
        "23.3": [[4.5, 5.8, 6.5, 6.5], [4.5, 4.5, 4.5, 4.5, 5.2]],
        "24.0": [[4.5, 6.5, 6.5, 6.5], [4.5, 4.5, 4.5, 4.5, 5.8]],
        "24.6": [[5.2, 6.5, 6.5, 6.5], [4.5, 4.5, 4.5, 4.5, 6.5]],
        "25.3": [[5.8, 6.5, 6.5, 6.5], [4.5, 4.5, 4.5, 5.2, 6.5]],
        "25.9": [[6.5, 6.5, 6.5, 6.5], [4.5, 4.5, 4.5, 5.8, 6.5]],
        "27.2": [[4.5, 4.5, 5.2, 6.5, 6.5], [4.5, 4.5, 4.5, 4.5, 4.5, 4.5]],
        "28.5": [[4.5, 4.5, 6.5, 6.5, 6.5], [4.5, 4.5, 4.5, 4.5, 4.5, 5.8]],
        "27.8": [[4.5, 5.8, 5.8, 5.8, 5.8], [4.5, 4.5, 4.5, 4.5, 4.5, 5.2]],
        "29.8": [[4.5, 5.8, 6.5, 6.5, 6.5], [4.5, 4.5, 4.5, 4.5, 5.2, 6.5]],
        "31.1": [[5.2, 6.5, 6.5, 6.5, 6.5], [4.5, 4.5, 4.5, 4.5, 6.5, 6.5]],
        "32.4": [[6.5, 6.5, 6.5, 6.5, 6.5], [4.5, 4.5, 4.5, 5.8, 6.5, 6.5]],
        "ov": [
          "18.1", "18.8", "19.4", "22.7", "23.3", "24.0", "24.6", "25.3",
          "25.9", "27.2", "28.5", "27.8", "29.8", "31.1", "32.4"
        ]
      },
      "防御パーセンテージ": {
        "20.4": [[5.8, 7.3, 7.3], [5.1, 5.1, 5.1, 5.1]],
        "21.1": [[6.6, 7.3, 7.3], [5.1, 5.1, 5.1, 5.8]],
        "21.9": [[7.3, 7.3, 7.3], [5.1, 5.1, 5.1, 6.6]],
        "25.5": [[5.1, 5.8, 7.3, 7.3], [5.1, 5.1, 5.1, 5.1, 5.1]],
        "26.2": [[5.1, 6.6, 7.3, 7.3], [5.1, 5.1, 5.1, 5.1, 5.8]],
        "27.0": [[5.1, 7.3, 7.3, 7.3], [5.1, 5.1, 5.1, 5.1, 6.6]],
        "27.7": [[5.8, 7.3, 7.3, 7.3], [5.1, 5.1, 5.1, 5.1, 7.3]],
        "28.4": [[6.6, 7.3, 7.3, 7.3], [5.1, 5.1, 5.1, 5.8, 7.3]],
        "29.2": [[7.3, 7.3, 7.3, 7.3], [5.1, 5.1, 5.1, 6.6, 7.3]],
        "30.6": [[5.1, 5.1, 5.8, 7.3, 7.3], [5.1, 5.1, 5.1, 5.1, 5.1, 5.1]],
        "31.3": [[5.1, 5.1, 6.6, 7.3, 7.3], [5.1, 5.1, 5.1, 5.1, 5.1, 5.8]],
        "32.1": [[5.1, 5.1, 7.3, 7.3, 7.3], [5.1, 5.1, 5.1, 5.1, 5.1, 6.6]],
        "32.8": [[5.1, 5.8, 7.3, 7.3, 7.3], [5.1, 5.1, 5.1, 5.1, 5.1, 7.3]],
        "33.5": [[5.1, 6.6, 7.3, 7.3, 7.3], [5.1, 5.1, 5.1, 5.1, 5.8, 7.3]],
        "34.3": [[5.1, 7.3, 7.3, 7.3, 7.3], [5.1, 5.1, 5.1, 5.1, 6.6, 7.3]],
        "35.0": [[5.8, 7.3, 7.3, 7.3, 7.3], [5.1, 5.1, 5.1, 5.1, 7.3, 7.3]],
        "35.7": [[6.6, 7.3, 7.3, 7.3, 7.3], [5.1, 5.1, 5.1, 5.8, 7.3, 7.3]],
        "ov": [
          "20.4", "21.1", "21.9", "25.5", "26.2", "27.0", "27.7", "28.4",
          "29.2", "30.6", "31.3", "32.1", "32.8", "33.5", "34.3", "35.0",
          "35.7"
        ]
      },
      "攻撃パーセンテージ": {
        "16.3": [[4.7, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1]],
        "16.9": [[5.3, 5.8, 5.8], [4.1, 4.1, 4.1, 4.7]],
        "17.5": [[5.8, 5.8, 5.8], [4.1, 4.1, 4.1, 5.3]],
        "20.4": [[4.1, 4.7, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1, 4.1]],
        "21.0": [[4.1, 5.3, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1, 4.7]],
        "21.6": [[4.1, 5.8, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1, 5.3]],
        "22.2": [[4.7, 5.8, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1, 5.8]],
        "22.7": [[5.3, 5.8, 5.8, 5.8], [4.1, 4.1, 4.1, 4.7, 5.8]],
        "23.3": [[5.8, 5.8, 5.8, 5.8], [4.1, 4.1, 4.1, 5.3, 5.8]],
        "24.5": [[4.1, 4.1, 4.7, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1, 4.1, 4.1]],
        "25.1": [[4.1, 4.1, 5.3, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1, 4.1, 4.7]],
        "25.7": [[4.1, 4.1, 5.8, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1, 4.1, 5.3]],
        "26.2": [[4.1, 4.7, 5.8, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1, 4.1, 5.8]],
        "26.8": [[4.1, 5.3, 5.8, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1, 4.7, 5.8]],
        "27.4": [[4.1, 5.8, 5.8, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1, 5.3, 5.8]],
        "25.6": [[4.7, 4.7, 4.7, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1, 4.7, 4.7]],
        "28.0": [[4.7, 5.8, 5.8, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1, 5.8, 5.8]],
        "28.6": [[5.3, 5.8, 5.8, 5.8, 5.8], [4.1, 4.1, 4.1, 4.7, 5.8, 5.8]],
        "29.2": [[5.8, 5.8, 5.8, 5.8, 5.8], [4.1, 4.1, 4.1, 5.3, 5.8, 5.8]],
        "ov": [
          "16.3", "16.9", "17.5", "20.4", "21.0", "21.6", "22.2", "22.7",
          "23.3", "24.5", "25.1", "25.7", "26.2", "26.8", "27.4", "25.6",
          "28.0", "28.6", "29.2"
        ]
      },
      "HPパーセンテージ": {
        "16.3": [[4.7, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1]],
        "16.9": [[5.3, 5.8, 5.8], [4.1, 4.1, 4.1, 4.7]],
        "17.5": [[5.8, 5.8, 5.8], [4.1, 4.1, 4.1, 5.3]],
        "20.4": [[4.1, 4.7, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1, 4.1]],
        "21.0": [[4.1, 5.3, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1, 4.7]],
        "21.6": [[4.1, 5.8, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1, 5.3]],
        "22.2": [[4.7, 5.8, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1, 5.8]],
        "22.7": [[5.3, 5.8, 5.8, 5.8], [4.1, 4.1, 4.1, 4.7, 5.8]],
        "23.3": [[5.8, 5.8, 5.8, 5.8], [4.1, 4.1, 4.1, 5.3, 5.8]],
        "24.5": [[4.1, 4.1, 4.7, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1, 4.1, 4.1]],
        "25.1": [[4.1, 4.1, 5.3, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1, 4.1, 4.7]],
        "25.7": [[4.1, 4.1, 5.8, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1, 4.1, 5.3]],
        "26.2": [[4.1, 4.7, 5.8, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1, 4.1, 5.8]],
        "26.8": [[4.1, 5.3, 5.8, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1, 4.7, 5.8]],
        "27.4": [[4.1, 5.8, 5.8, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1, 5.3, 5.8]],
        "25.6": [[4.7, 4.7, 4.7, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1, 4.7, 4.7]],
        "28.0": [[4.7, 5.8, 5.8, 5.8, 5.8], [4.1, 4.1, 4.1, 4.1, 5.8, 5.8]],
        "28.6": [[5.3, 5.8, 5.8, 5.8, 5.8], [4.1, 4.1, 4.1, 4.7, 5.8, 5.8]],
        "29.2": [[5.8, 5.8, 5.8, 5.8, 5.8], [4.1, 4.1, 4.1, 5.3, 5.8, 5.8]],
        "ov": [
          "16.3", "16.9", "17.5", "20.4", "21.0", "21.6", "22.2", "22.7",
          "23.3", "24.5", "25.1", "25.7", "26.2", "26.8", "27.4", "25.6",
          "28.0", "28.6", "29.2"
        ]
      },
      "HP": {
        "837": [[239, 299, 299], [209, 209, 209, 209]],
        "866": [[269, 299, 299], [209, 209, 209, 239]],
        "896": [[299, 299, 299], [209, 209, 209, 269]],
        "1046": [[209, 239, 299, 299], [209, 209, 209, 209, 209]],
        "1076": [[209, 269, 299, 299], [209, 209, 209, 209, 239]],
        "1105": [[209, 299, 299, 299], [209, 209, 209, 209, 269]],
        "1135": [[239, 299, 299, 299], [209, 209, 209, 209, 299]],
        "1165": [[269, 299, 299, 299], [209, 209, 209, 239, 299]],
        "1195": [[299, 299, 299, 299], [209, 209, 209, 269, 299]],
        "1255": [[209, 209, 239, 299, 299], [209, 209, 209, 209, 209, 209]],
        "1285": [[209, 209, 269, 299, 299], [209, 209, 209, 209, 209, 239]],
        "1315": [[209, 209, 299, 299, 299], [209, 209, 209, 209, 209, 269]],
        "1344": [[209, 239, 299, 299, 299], [209, 209, 209, 209, 209, 299]],
        "1374": [[209, 269, 299, 299, 299], [209, 209, 209, 209, 239, 299]],
        "1404": [[209, 299, 299, 299, 299], [209, 209, 209, 209, 269, 299]],
        "1434": [[239, 299, 299, 299, 299], [209, 209, 209, 209, 299, 299]],
        "1464": [[269, 299, 299, 299, 299], [209, 209, 209, 239, 299, 299]],
        "1494": [[299, 299, 299, 299, 299], [209, 209, 209, 269, 299, 299]],
        "ov": [
          "837", "866", "896", "1046", "1076", "1105", "1135", "1165", "1195",
          "1255", "1285", "1315", "1344", "1374", "1404", "1434", "1464",
          "1494"
        ]
      },
      "攻撃力": {
        "54": [[16, 19, 19], [14, 14, 14, 14]],
        "56": [[18, 19, 19], [14, 14, 14, 16]],
        "58": [[19, 19, 19], [14, 14, 14, 18]],
        "68": [[14, 16, 19, 19], [14, 14, 14, 14, 14]],
        "70": [[14, 18, 19, 19], [14, 14, 14, 14, 16]],
        "72": [[14, 19, 19, 19], [14, 14, 14, 14, 18]],
        "74": [[16, 19, 19, 19], [14, 14, 14, 14, 19]],
        "76": [[18, 19, 19, 19], [14, 14, 14, 16, 19]],
        "78": [[19, 19, 19, 19], [14, 14, 14, 18, 19]],
        "82": [[14, 14, 16, 19, 19], [14, 14, 14, 14, 14, 14]],
        "84": [[14, 14, 18, 19, 19], [14, 14, 14, 14, 14, 16]],
        "86": [[14, 14, 19, 19, 19], [14, 14, 14, 14, 14, 18]],
        "88": [[14, 16, 19, 19, 19], [14, 14, 14, 14, 14, 19]],
        "89": [[14, 18, 19, 19, 19], [14, 14, 14, 14, 16, 19]],
        "91": [[14, 19, 19, 19, 19], [14, 14, 14, 14, 18, 19]],
        "93": [[16, 19, 19, 19, 19], [14, 14, 14, 14, 19, 19]],
        "95": [[18, 19, 19, 19, 19], [14, 14, 14, 16, 19, 19]],
        "97": [[19, 19, 19, 19, 19], [14, 14, 14, 18, 19, 19]],
        "ov": [
          "54", "56", "58", "68", "70", "72", "74", "76", "78", "82", "84",
          "86", "88", "89", "91", "93", "95", "97"
        ]
      },
      "防御力": {
        "65": [[19, 23, 23], [16, 16, 16, 16]],
        "67": [[21, 23, 23], [16, 16, 16, 19]],
        "69": [[23, 23, 23], [16, 16, 16, 21]],
        "81": [[16, 19, 23, 23], [16, 16, 16, 16, 16]],
        "83": [[16, 21, 23, 23], [16, 16, 16, 16, 19]],
        "86": [[16, 23, 23, 23], [16, 16, 16, 16, 21]],
        "88": [[19, 23, 23, 23], [16, 16, 16, 16, 23]],
        "90": [[21, 23, 23, 23], [16, 16, 16, 19, 23]],
        "93": [[23, 23, 23, 23], [16, 16, 16, 21, 23]],
        "97": [[16, 16, 19, 23, 23], [16, 16, 16, 16, 16, 16]],
        "100": [[16, 16, 21, 23, 23], [16, 16, 16, 16, 16, 19]],
        "102": [[16, 16, 23, 23, 23], [16, 16, 16, 16, 16, 21]],
        "104": [[16, 19, 23, 23, 23], [16, 16, 16, 16, 16, 23]],
        "106": [[16, 21, 23, 23, 23], [16, 16, 16, 16, 19, 23]],
        "109": [[16, 23, 23, 23, 23], [16, 16, 16, 16, 21, 23]],
        "111": [[19, 23, 23, 23, 23], [16, 16, 16, 16, 23, 23]],
        "113": [[21, 23, 23, 23, 23], [16, 16, 16, 19, 23, 23]],
        "116": [[23, 23, 23, 23, 23], [16, 16, 16, 21, 23, 23]],
        "ov": [
          "65", "67", "69", "81", "83", "86", "88", "90", "93", "97", "100",
          "102", "104", "106", "109", "111", "113", "116"
        ]
      },
      "元素熟知": {
        "65": [[19, 23, 23], [16, 16, 16, 16]],
        "68": [[21, 23, 23], [16, 16, 16, 19]],
        "70": [[23, 23, 23], [16, 16, 16, 21]],
        "82": [[16, 19, 23, 23], [16, 16, 16, 16, 16]],
        "84": [[16, 21, 23, 23], [16, 16, 16, 16, 19]],
        "86": [[16, 23, 23, 23], [16, 16, 16, 16, 21]],
        "89": [[19, 23, 23, 23], [16, 16, 16, 16, 23]],
        "91": [[21, 23, 23, 23], [16, 16, 16, 19, 23]],
        "93": [[23, 23, 23, 23], [16, 16, 16, 21, 23]],
        "98": [[16, 16, 19, 23, 23], [16, 16, 16, 16, 16, 16]],
        "100": [[16, 16, 21, 23, 23], [16, 16, 16, 16, 16, 19]],
        "103": [[16, 16, 23, 23, 23], [16, 16, 16, 16, 16, 21]],
        "105": [[16, 19, 23, 23, 23], [16, 16, 16, 16, 16, 23]],
        "107": [[16, 21, 23, 23, 23], [16, 16, 16, 16, 19, 23]],
        "110": [[16, 23, 23, 23, 23], [16, 16, 16, 16, 21, 23]],
        "112": [[19, 23, 23, 23, 23], [16, 16, 16, 16, 23, 23]],
        "114": [[21, 23, 23, 23, 23], [16, 16, 16, 19, 23, 23]],
        "117": [[23, 23, 23, 23, 23], [16, 16, 16, 21, 23, 23]],
        "ov": [
          "65", "68", "70", "82", "84", "86", "89", "91", "93", "98", "100",
          "103", "105", "107", "110", "112", "114", "117"
        ]
      }
    }

  def suboption(self):  # 聖遺物のサブオプション情報
    return {
      "会心ダメージ": {
        "5.4": [5.4],
        "6.2": [6.2],
        "7.0": [7.0],
        "7.8": [7.8],
        "10.9": [5.4, 5.4],
        "11.7": [5.4, 6.2],
        "12.4": [5.4, 7.0],
        "13.2": [5.4, 7.8],
        "14.0": [6.2, 7.8],
        "14.8": [7.0, 7.8],
        "15.5": [7.8, 7.8],
        "16.3": [5.4, 5.4, 5.4],
        "17.1": [5.4, 5.4, 6.2],
        "17.9": [5.4, 5.4, 7.0],
        "18.7": [5.4, 5.4, 7.8],
        "19.4": [5.4, 6.2, 7.8],
        "20.2": [5.4, 7.0, 7.8],
        "21.0": [5.4, 7.8, 7.8],
        "21.8": [5.4, 5.4, 5.4, 5.4],
        "22.5": [5.4, 5.4, 5.4, 6.2],
        "23.3": [5.4, 5.4, 5.4, 7.0],
        "24.1": [5.4, 5.4, 5.4, 7.8],
        "24.9": [5.4, 5.4, 6.2, 7.8],
        "25.6": [5.4, 5.4, 7.0, 7.8],
        "26.4": [5.4, 5.4, 7.8, 7.8],
        "25.7": [5.4, 6.2, 6.2, 7.8],
        "27.2": [5.4, 5.4, 5.4, 5.4, 5.4],
        "28.0": [5.4, 5.4, 5.4, 5.4, 6.2],
        "28.8": [5.4, 5.4, 5.4, 5.4, 7.0],
        "28.7": [7.0, 7.0, 7.0, 7.8],
        "29.5": [5.4, 5.4, 5.4, 5.4, 7.8],
        "30.3": [5.4, 5.4, 5.4, 6.2, 7.8],
        "31.1": [5.4, 5.4, 5.4, 7.0, 7.8],
        "31.9": [5.4, 5.4, 5.4, 7.8, 7.8],
        "32.6": [5.4, 5.4, 5.4, 5.4, 5.4, 5.4],
        "33.4": [5.4, 5.4, 5.4, 5.4, 5.4, 6.2],
        "34.2": [5.4, 5.4, 5.4, 5.4, 5.4, 7.0],
        "35.0": [5.4, 5.4, 5.4, 5.4, 5.4, 7.8],
        "35.7": [5.4, 5.4, 5.4, 5.4, 7.0, 7.0],
        "36.5": [5.4, 5.4, 5.4, 5.4, 7.0, 7.8],
        "32.7": [6.2, 6.2, 6.2, 6.2, 7.8],
        "35.8": [5.4, 5.4, 5.4, 5.4, 6.2, 7.8],
        "37.3": [5.4, 5.4, 5.4, 5.4, 7.8, 7.8],
        "38.1": [5.4, 5.4, 5.4, 6.2, 7.8, 7.8],
        "38.8": [5.4, 5.4, 5.4, 7.0, 7.8, 7.8],
        "38.9": [5.4, 5.4, 5.4, 7.0, 7.8, 7.8],
        "39.6": [5.4, 5.4, 5.4, 7.8, 7.8, 7.8],
        "40.4": [5.4, 5.4, 6.2, 7.8, 7.8, 7.8],
        "41.2": [5.4, 5.4, 7.0, 7.8, 7.8, 7.8],
        "42.0": [5.4, 5.4, 7.8, 7.8, 7.8, 7.8],
        "42.7": [5.4, 6.2, 7.8, 7.8, 7.8, 7.8],
        "41.9": [5.4, 7.0, 7.0, 7.0, 7.8, 7.8],
        "43.5": [5.4, 7.0, 7.8, 7.8, 7.8, 7.8],
        "44.3": [5.4, 7.8, 7.8, 7.8, 7.8, 7.8],
        "45.1": [6.2, 7.8, 7.8, 7.8, 7.8, 7.8],
        "45.8": [7.0, 7.8, 7.8, 7.8, 7.8, 7.8],
        "46.6": [7.8, 7.8, 7.8, 7.8, 7.8, 7.8]
      },
      "会心率": {
        "2.7": [2.7],
        "3.1": [3.1],
        "3.5": [3.5],
        "3.9": [3.9],
        "5.4": [2.7, 2.7],
        "5.8": [2.7, 3.1],
        "6.2": [2.7, 3.5],
        "6.6": [2.7, 3.9],
        "7.0": [3.1, 3.9],
        "7.4": [3.5, 3.9],
        "7.8": [3.9, 3.9],
        "8.2": [2.7, 2.7, 2.7],
        "8.6": [2.7, 2.7, 3.1],
        "8.9": [2.7, 2.7, 3.5],
        "9.3": [2.7, 2.7, 3.9],
        "9.7": [2.7, 3.1, 3.9],
        "10.1": [2.7, 3.5, 3.9],
        "10.5": [2.7, 3.9, 3.9],
        "10.9": [2.7, 2.7, 2.7, 2.7],
        "11.3": [2.7, 2.7, 2.7, 3.1],
        "11.7": [2.7, 2.7, 2.7, 3.5],
        "12.1": [2.7, 2.7, 2.7, 3.9],
        "12.4": [2.7, 2.7, 3.1, 3.9],
        "12.8": [2.7, 2.7, 3.5, 3.9],
        "13.2": [2.7, 2.7, 3.9, 3.9],
        "12.0": [2.7, 3.1, 3.1, 3.1],
        "13.6": [2.7, 2.7, 2.7, 2.7, 2.7],
        "14.0": [2.7, 2.7, 2.7, 2.7, 3.1],
        "14.4": [2.7, 2.7, 2.7, 2.7, 3.5],
        "14.8": [2.7, 2.7, 2.7, 2.7, 3.9],
        "15.2": [2.7, 2.7, 2.7, 3.1, 3.9],
        "15.6": [2.7, 2.7, 2.7, 3.5, 3.9],
        "15.9": [2.7, 2.7, 2.7, 3.9, 3.9],
        "16.3": [2.7, 2.7, 2.7, 2.7, 2.7, 2.7],
        "16.7": [2.7, 2.7, 2.7, 2.7, 2.7, 3.1],
        "15.5": [2.7, 2.7, 3.1, 3.1, 3.9],
        "17.1": [2.7, 2.7, 2.7, 2.7, 2.7, 3.5],
        "17.5": [2.7, 2.7, 2.7, 2.7, 2.7, 3.9],
        "17.9": [2.7, 2.7, 2.7, 2.7, 3.1, 3.9],
        "18.3": [2.7, 2.7, 2.7, 2.7, 3.5, 3.9],
        "18.7": [2.7, 2.7, 2.7, 2.7, 3.9, 3.9],
        "19.1": [2.7, 2.7, 2.7, 3.1, 3.9, 3.9],
        "19.5": [3.9, 3.9, 3.9, 3.9, 3.9],
        "19.4": [2.7, 2.7, 2.7, 3.5, 3.9, 3.9],
        "19.8": [2.7, 2.7, 2.7, 3.9, 3.9, 3.9],
        "20.2": [2.7, 2.7, 3.1, 3.9, 3.9, 3.9],
        "20.6": [2.7, 2.7, 3.5, 3.9, 3.9, 3.9],
        "19.0": [2.7, 2.7, 2.7, 3.1, 3.9, 3.9],
        "21.0": [2.7, 2.7, 3.9, 3.9, 3.9, 3.9],
        "21.4": [2.7, 3.1, 3.9, 3.9, 3.9, 3.9],
        "21.8": [2.7, 3.5, 3.9, 3.9, 3.9, 3.9],
        "22.2": [2.7, 3.9, 3.9, 3.9, 3.9, 3.9],
        "22.6": [3.1, 3.9, 3.9, 3.9, 3.9, 3.9],
        "23.0": [3.5, 3.9, 3.9, 3.9, 3.9, 3.9],
        "23.3": [3.9, 3.9, 3.9, 3.9, 3.9, 3.9]
      },
      "元素チャージ効率": {
        "4.5": [4.5],
        "5.2": [5.2],
        "5.8": [5.8],
        "6.5": [6.5],
        "9.1": [4.5, 4.5],
        "9.7": [4.5, 5.2],
        "10.4": [4.5, 5.8],
        "11.0": [4.5, 6.5],
        "11.7": [5.2, 6.5],
        "12.3": [5.8, 6.5],
        "13.0": [6.5, 6.5],
        "13.6": [4.5, 4.5, 4.5],
        "14.2": [4.5, 4.5, 5.2],
        "14.9": [4.5, 4.5, 5.8],
        "15.5": [4.5, 4.5, 6.5],
        "16.2": [4.5, 5.2, 6.5],
        "16.8": [4.5, 5.8, 6.5],
        "17.5": [4.5, 6.5, 6.5],
        "18.1": [4.5, 4.5, 4.5, 4.5],
        "18.8": [4.5, 4.5, 4.5, 5.2],
        "19.4": [4.5, 4.5, 4.5, 5.8],
        "20.1": [4.5, 4.5, 4.5, 6.5],
        "20.7": [4.5, 4.5, 5.2, 6.5],
        "21.4": [4.5, 4.5, 5.8, 6.5],
        "22.0": [4.5, 4.5, 6.5, 6.5],
        "22.7": [4.5, 4.5, 4.5, 4.5, 4.5],
        "23.3": [4.5, 4.5, 4.5, 4.5, 5.2],
        "24.0": [4.5, 4.5, 4.5, 4.5, 5.8],
        "24.6": [4.5, 4.5, 4.5, 4.5, 6.5],
        "25.3": [4.5, 4.5, 4.5, 5.2, 6.5],
        "25.9": [4.5, 4.5, 4.5, 5.8, 6.5],
        "26.6": [4.5, 4.5, 4.5, 6.5, 6.5],
        "26.5": [4.5, 5.2, 5.2, 5.8, 5.8],
        "27.2": [4.5, 4.5, 4.5, 4.5, 4.5, 4.5],
        "27.9": [4.5, 4.5, 5.8, 6.5, 6.5],
        "28.5": [4.5, 4.5, 4.5, 4.5, 4.5, 5.8],
        "29.2": [4.5, 5.2, 6.5, 6.5, 6.5],
        "27.8": [4.5, 4.5, 4.5, 4.5, 4.5, 5.2],
        "29.8": [4.5, 4.5, 4.5, 4.5, 5.2, 6.5],
        "30.5": [4.5, 6.5, 6.5, 6.5, 6.5],
        "31.1": [4.5, 4.5, 4.5, 4.5, 6.5, 6.5],
        "30.4": [4.5, 4.5, 4.5, 4.5, 5.8, 6.5],
        "31.8": [5.8, 6.5, 6.5, 6.5, 6.5],
        "32.4": [4.5, 4.5, 4.5, 5.8, 6.5, 6.5],
        "29.1": [4.5, 4.5, 4.5, 4.5, 4.5, 6.5],
        "31.7": [4.5, 4.5, 4.5, 5.2, 6.5, 6.5],
        "33.0": [4.5, 4.5, 4.5, 6.5, 6.5, 6.5],
        "33.7": [4.5, 4.5, 5.2, 6.5, 6.5, 6.5],
        "34.3": [4.5, 4.5, 5.8, 6.5, 6.5, 6.5],
        "35.0": [4.5, 4.5, 6.5, 6.5, 6.5, 6.5],
        "35.6": [4.5, 5.2, 6.5, 6.5, 6.5, 6.5],
        "36.3": [4.5, 5.8, 6.5, 6.5, 6.5, 6.5],
        "36.9": [4.5, 6.5, 6.5, 6.5, 6.5, 6.5],
        "37.6": [5.2, 6.5, 6.5, 6.5, 6.5, 6.5],
        "38.2": [5.8, 6.5, 6.5, 6.5, 6.5, 6.5],
        "38.9": [6.5, 6.5, 6.5, 6.5, 6.5, 6.5]
      },
      "HPパーセンテージ": {
        "4.1": [4.1],
        "4.7": [4.7],
        "5.3": [5.3],
        "5.8": [5.8],
        "8.2": [4.1, 4.1],
        "8.7": [4.1, 4.7],
        "9.3": [4.1, 5.3],
        "9.9": [4.1, 5.8],
        "10.5": [4.7, 5.8],
        "11.1": [5.3, 5.8],
        "11.7": [5.8, 5.8],
        "12.2": [4.1, 4.1, 4.1],
        "12.8": [4.1, 4.1, 4.7],
        "13.4": [4.1, 4.1, 5.3],
        "14.0": [4.1, 4.1, 5.8],
        "14.6": [4.1, 4.7, 5.8],
        "15.2": [4.1, 5.3, 5.8],
        "15.7": [4.1, 5.8, 5.8],
        "16.3": [4.1, 4.1, 4.1, 4.1],
        "15.8": [5.3, 5.3, 5.3],
        "16.9": [4.1, 4.1, 4.1, 4.7],
        "17.5": [4.1, 4.1, 4.1, 5.3],
        "18.1": [4.1, 4.1, 4.1, 5.8],
        "18.7": [4.1, 4.1, 4.7, 5.8],
        "19.2": [4.1, 4.1, 5.3, 5.8],
        "19.8": [4.1, 4.1, 5.8, 5.8],
        "20.4": [4.1, 4.1, 4.1, 4.1, 4.1],
        "21.0": [4.1, 4.1, 4.1, 4.1, 4.7],
        "21.6": [4.1, 4.1, 4.1, 4.1, 5.3],
        "18.6": [4.7, 4.7, 4.7, 4.7],
        "22.2": [4.1, 4.1, 4.1, 4.1, 5.8],
        "22.7": [4.1, 4.1, 4.1, 4.7, 5.8],
        "23.3": [4.1, 4.1, 4.1, 5.3, 5.8],
        "23.9": [4.1, 4.1, 4.1, 5.8, 5.8],
        "22.1": [4.1, 4.1, 4.7, 4.7, 4.7],
        "24.5": [4.1, 4.1, 4.1, 4.1, 4.1, 4.1],
        "25.1": [4.1, 4.1, 4.1, 4.1, 4.1, 4.7],
        "25.7": [4.1, 4.1, 4.1, 4.1, 4.1, 5.3],
        "26.2": [4.1, 4.1, 4.1, 4.1, 4.1, 5.8],
        "26.8": [4.1, 4.1, 4.1, 4.1, 4.7, 5.8],
        "27.4": [4.1, 4.1, 4.1, 4.1, 5.3, 5.8],
        "25.6": [4.1, 4.1, 4.1, 4.1, 4.7, 4.7],
        "28.0": [4.1, 4.1, 4.1, 4.1, 5.8, 5.8],
        "26.3": [5.3, 5.3, 5.3, 5.3, 5.3],
        "28.6": [4.1, 4.1, 4.1, 4.7, 5.8, 5.8],
        "29.2": [4.1, 4.1, 4.1, 5.3, 5.8, 5.8],
        "29.7": [4.1, 4.1, 4.1, 5.8, 5.8, 5.8],
        "29.1": [4.1, 4.1, 4.7, 4.7, 5.8, 5.8],
        "30.3": [4.1, 4.1, 4.7, 5.8, 5.8, 5.8],
        "30.9": [4.1, 4.1, 5.3, 5.8, 5.8, 5.8],
        "31.5": [4.1, 4.1, 5.8, 5.8, 5.8, 5.8],
        "32.1": [4.1, 4.7, 5.8, 5.8, 5.8, 5.8],
        "32.7": [4.1, 5.3, 5.8, 5.8, 5.8, 5.8],
        "33.2": [4.1, 5.8, 5.8, 5.8, 5.8, 5.8],
        "28.5": [4.1, 4.7, 4.7, 4.7, 4.7, 5.8],
        "32.6": [4.7, 4.7, 5.8, 5.8, 5.8, 5.8],
        "33.8": [4.7, 5.8, 5.8, 5.8, 5.8, 5.8],
        "34.4": [5.3, 5.8, 5.8, 5.8, 5.8, 5.8],
        "35.0": [5.8, 5.8, 5.8, 5.8, 5.8, 5.8]
      },
      "防御パーセンテージ": {
        "5.1": [5.1],
        "5.8": [5.8],
        "6.6": [6.6],
        "7.3": [7.3],
        "10.2": [5.1, 5.1],
        "10.9": [5.1, 5.8],
        "11.7": [5.1, 6.6],
        "12.4": [5.1, 7.3],
        "13.1": [5.8, 7.3],
        "13.9": [6.6, 7.3],
        "14.6": [7.3, 7.3],
        "15.3": [5.1, 5.1, 5.1],
        "16.0": [5.1, 5.1, 5.8],
        "16.8": [5.1, 5.1, 6.6],
        "17.5": [5.1, 5.1, 7.3],
        "18.2": [5.1, 5.8, 7.3],
        "19.0": [5.1, 6.6, 7.3],
        "19.7": [5.1, 7.3, 7.3],
        "20.4": [5.1, 5.1, 5.1, 5.1],
        "21.1": [5.1, 5.1, 5.1, 5.8],
        "21.9": [5.1, 5.1, 5.1, 6.6],
        "22.6": [5.1, 5.1, 5.1, 7.3],
        "23.3": [5.1, 5.1, 5.8, 7.3],
        "24.0": [5.1, 5.1, 6.6, 7.3],
        "24.8": [5.1, 5.1, 7.3, 7.3],
        "25.5": [5.1, 5.1, 5.1, 5.1, 5.1],
        "24.1": [5.1, 5.8, 5.8, 7.3],
        "26.2": [5.1, 5.1, 5.1, 5.1, 5.8],
        "27.0": [5.1, 5.1, 5.1, 5.1, 6.6],
        "27.7": [5.1, 5.1, 5.1, 5.1, 7.3],
        "28.4": [5.1, 5.1, 5.1, 5.8, 7.3],
        "29.2": [5.1, 5.1, 5.1, 6.6, 7.3],
        "29.9": [5.1, 5.1, 5.1, 7.3, 7.3],
        "30.6": [5.1, 5.1, 5.1, 5.1, 5.1, 5.1],
        "29.1": [5.1, 5.1, 5.8, 6.6, 6.6],
        "31.3": [5.1, 5.1, 5.1, 5.1, 5.1, 5.8],
        "32.1": [5.1, 5.1, 5.1, 5.1, 5.1, 6.6],
        "32.8": [5.1, 5.1, 5.1, 5.1, 5.1, 7.3],
        "33.5": [5.1, 5.1, 5.1, 5.1, 5.8, 7.3],
        "34.3": [5.1, 5.1, 5.1, 5.1, 6.6, 7.3],
        "35.0": [5.1, 5.1, 5.1, 5.1, 7.3, 7.3],
        "35.7": [5.1, 5.1, 5.1, 5.8, 7.3, 7.3],
        "36.5": [7.3, 7.3, 7.3, 7.3, 7.3],
        "36.4": [5.1, 5.1, 5.1, 6.6, 7.3, 7.3],
        "37.2": [5.1, 5.1, 5.1, 7.3, 7.3, 7.3],
        "37.9": [5.1, 5.1, 5.8, 7.3, 7.3, 7.3],
        "34.2": [5.1, 5.1, 5.1, 5.8, 6.6, 6.6],
        "38.6": [5.1, 5.1, 6.6, 7.3, 7.3, 7.3],
        "39.4": [5.1, 5.1, 7.3, 7.3, 7.3, 7.3],
        "40.1": [5.1, 5.8, 7.3, 7.3, 7.3, 7.3],
        "40.8": [5.1, 6.6, 7.3, 7.3, 7.3, 7.3],
        "41.6": [5.1, 7.3, 7.3, 7.3, 7.3, 7.3],
        "42.3": [5.8, 7.3, 7.3, 7.3, 7.3, 7.3],
        "43.0": [6.6, 7.3, 7.3, 7.3, 7.3, 7.3],
        "43.7": [7.3, 7.3, 7.3, 7.3, 7.3, 7.3]
      },
      "攻撃パーセンテージ": {
        "4.1": [4.1],
        "4.7": [4.7],
        "5.3": [5.3],
        "5.8": [5.8],
        "8.2": [4.1, 4.1],
        "8.7": [4.1, 4.7],
        "9.3": [4.1, 5.3],
        "9.9": [4.1, 5.8],
        "10.5": [4.7, 5.8],
        "11.1": [5.3, 5.8],
        "11.7": [5.8, 5.8],
        "12.2": [4.1, 4.1, 4.1],
        "12.8": [4.1, 4.1, 4.7],
        "13.4": [4.1, 4.1, 5.3],
        "14.0": [4.1, 4.1, 5.8],
        "14.6": [4.1, 4.7, 5.8],
        "15.2": [4.1, 5.3, 5.8],
        "15.7": [4.1, 5.8, 5.8],
        "16.3": [4.1, 4.1, 4.1, 4.1],
        "15.8": [5.3, 5.3, 5.3],
        "16.9": [4.1, 4.1, 4.1, 4.7],
        "17.5": [4.1, 4.1, 4.1, 5.3],
        "18.1": [4.1, 4.1, 4.1, 5.8],
        "18.7": [4.1, 4.1, 4.7, 5.8],
        "19.2": [4.1, 4.1, 5.3, 5.8],
        "19.8": [4.1, 4.1, 5.8, 5.8],
        "20.4": [4.1, 4.1, 4.1, 4.1, 4.1],
        "21.0": [4.1, 4.1, 4.1, 4.1, 4.7],
        "21.6": [4.1, 4.1, 4.1, 4.1, 5.3],
        "18.6": [4.7, 4.7, 4.7, 4.7],
        "22.2": [4.1, 4.1, 4.1, 4.1, 5.8],
        "22.7": [4.1, 4.1, 4.1, 4.7, 5.8],
        "23.3": [4.1, 4.1, 4.1, 5.3, 5.8],
        "23.9": [4.1, 4.1, 4.1, 5.8, 5.8],
        "22.1": [4.1, 4.1, 4.7, 4.7, 4.7],
        "24.5": [4.1, 4.1, 4.1, 4.1, 4.1, 4.1],
        "25.1": [4.1, 4.1, 4.1, 4.1, 4.1, 4.7],
        "25.7": [4.1, 4.1, 4.1, 4.1, 4.1, 5.3],
        "26.2": [4.1, 4.1, 4.1, 4.1, 4.1, 5.8],
        "26.8": [4.1, 4.1, 4.1, 4.1, 4.7, 5.8],
        "27.4": [4.1, 4.1, 4.1, 4.1, 5.3, 5.8],
        "25.6": [4.1, 4.1, 4.1, 4.1, 4.7, 4.7],
        "28.0": [4.1, 4.1, 4.1, 4.1, 5.8, 5.8],
        "26.3": [5.3, 5.3, 5.3, 5.3, 5.3],
        "28.6": [4.1, 4.1, 4.1, 4.7, 5.8, 5.8],
        "29.2": [4.1, 4.1, 4.1, 5.3, 5.8, 5.8],
        "29.7": [4.1, 4.1, 4.1, 5.8, 5.8, 5.8],
        "29.1": [4.1, 4.1, 4.7, 4.7, 5.8, 5.8],
        "30.3": [4.1, 4.1, 4.7, 5.8, 5.8, 5.8],
        "30.9": [4.1, 4.1, 5.3, 5.8, 5.8, 5.8],
        "31.5": [4.1, 4.1, 5.8, 5.8, 5.8, 5.8],
        "32.1": [4.1, 4.7, 5.8, 5.8, 5.8, 5.8],
        "32.7": [4.1, 5.3, 5.8, 5.8, 5.8, 5.8],
        "33.2": [4.1, 5.8, 5.8, 5.8, 5.8, 5.8],
        "28.5": [4.1, 4.7, 4.7, 4.7, 4.7, 5.8],
        "32.6": [4.7, 4.7, 5.8, 5.8, 5.8, 5.8],
        "33.8": [4.7, 5.8, 5.8, 5.8, 5.8, 5.8],
        "34.4": [5.3, 5.8, 5.8, 5.8, 5.8, 5.8],
        "35.0": [5.8, 5.8, 5.8, 5.8, 5.8, 5.8]
      },
      "HP": {
        "209": [209],
        "239": [239],
        "269": [269],
        "299": [299],
        "418": [209, 209],
        "448": [209, 239],
        "478": [209, 269],
        "508": [209, 299],
        "538": [239, 299],
        "568": [269, 299],
        "598": [299, 299],
        "627": [209, 209, 209],
        "657": [209, 209, 239],
        "687": [209, 209, 269],
        "717": [209, 209, 299],
        "747": [209, 239, 299],
        "777": [209, 269, 299],
        "807": [209, 299, 299],
        "837": [209, 209, 209, 209],
        "866": [209, 209, 209, 239],
        "896": [209, 209, 209, 269],
        "926": [209, 209, 209, 299],
        "956": [209, 209, 239, 299],
        "986": [209, 209, 269, 299],
        "1016": [209, 209, 299, 299],
        "1046": [209, 209, 209, 209, 209],
        "1076": [209, 209, 209, 209, 239],
        "1105": [209, 209, 209, 209, 269],
        "1135": [209, 209, 209, 209, 299],
        "1165": [209, 209, 209, 239, 299],
        "1195": [209, 209, 209, 269, 299],
        "1225": [209, 209, 209, 299, 299],
        "1255": [209, 209, 209, 209, 209, 209],
        "1285": [209, 209, 209, 209, 209, 239],
        "1315": [209, 209, 209, 209, 209, 269],
        "1344": [209, 209, 209, 209, 209, 299],
        "1374": [209, 209, 209, 209, 239, 299],
        "1404": [209, 209, 209, 209, 269, 299],
        "1434": [209, 209, 209, 209, 299, 299],
        "1464": [209, 209, 209, 239, 299, 299],
        "1494": [209, 209, 209, 269, 299, 299],
        "1524": [209, 209, 209, 299, 299, 299],
        "1554": [209, 209, 239, 299, 299, 299],
        "1583": [209, 209, 269, 299, 299, 299],
        "1613": [209, 209, 299, 299, 299, 299],
        "1643": [209, 239, 299, 299, 299, 299],
        "1673": [209, 269, 299, 299, 299, 299],
        "1703": [209, 299, 299, 299, 299, 299],
        "1733": [239, 299, 299, 299, 299, 299],
        "1763": [269, 299, 299, 299, 299, 299],
        "1793": [299, 299, 299, 299, 299, 299]
      },
      "攻撃力": {
        "14": [14],
        "16": [16],
        "18": [18],
        "19": [19],
        "27": [14, 14],
        "29": [14, 16],
        "31": [14, 18],
        "33": [14, 19],
        "35": [16, 19],
        "37": [18, 19],
        "39": [19, 19],
        "41": [14, 14, 14],
        "43": [14, 14, 16],
        "45": [14, 14, 18],
        "47": [14, 14, 19],
        "49": [14, 16, 19],
        "51": [14, 18, 19],
        "53": [14, 19, 19],
        "54": [14, 14, 14, 14],
        "56": [14, 14, 14, 16],
        "58": [14, 14, 14, 18],
        "60": [14, 14, 14, 19],
        "62": [14, 14, 16, 19],
        "64": [14, 14, 18, 19],
        "66": [14, 14, 19, 19],
        "68": [14, 14, 14, 14, 14],
        "70": [14, 14, 14, 14, 16],
        "72": [14, 14, 14, 14, 18],
        "74": [14, 14, 14, 14, 19],
        "76": [14, 14, 14, 16, 19],
        "78": [14, 14, 14, 18, 19],
        "80": [14, 14, 14, 19, 19],
        "82": [14, 14, 14, 14, 14, 14],
        "84": [14, 14, 14, 14, 14, 16],
        "86": [14, 14, 14, 14, 14, 18],
        "88": [14, 14, 14, 14, 14, 19],
        "89": [14, 14, 14, 14, 16, 19],
        "91": [14, 14, 14, 14, 18, 19],
        "93": [14, 14, 14, 14, 19, 19],
        "95": [14, 14, 14, 16, 19, 19],
        "97": [14, 14, 14, 18, 19, 19],
        "90": [14, 14, 14, 14, 18, 18],
        "99": [14, 14, 14, 19, 19, 19],
        "101": [14, 14, 16, 19, 19, 19],
        "103": [14, 14, 18, 19, 19, 19],
        "105": [14, 14, 19, 19, 19, 19],
        "107": [14, 16, 19, 19, 19, 19],
        "109": [14, 18, 19, 19, 19, 19],
        "111": [14, 19, 19, 19, 19, 19],
        "113": [16, 19, 19, 19, 19, 19],
        "115": [18, 19, 19, 19, 19, 19],
        "117": [19, 19, 19, 19, 19, 19]
      },
      "防御力": {
        "16": [16],
        "19": [19],
        "21": [21],
        "23": [23],
        "32": [16, 16],
        "35": [16, 19],
        "37": [16, 21],
        "39": [16, 23],
        "42": [19, 23],
        "44": [21, 23],
        "46": [23, 23],
        "49": [16, 16, 16],
        "51": [16, 16, 19],
        "53": [16, 16, 21],
        "56": [16, 16, 23],
        "58": [16, 19, 23],
        "60": [16, 21, 23],
        "62": [16, 23, 23],
        "63": [16, 23, 23],
        "65": [16, 16, 16, 16],
        "67": [16, 16, 16, 19],
        "69": [16, 16, 16, 21],
        "72": [16, 16, 16, 23],
        "74": [16, 16, 19, 23],
        "76": [16, 16, 21, 23],
        "79": [16, 16, 23, 23],
        "81": [16, 16, 16, 16, 16],
        "83": [16, 16, 16, 16, 19],
        "86": [16, 16, 16, 16, 21],
        "88": [16, 16, 16, 16, 23],
        "90": [16, 16, 16, 19, 23],
        "93": [16, 16, 16, 21, 23],
        "95": [16, 16, 16, 23, 23],
        "97": [16, 16, 16, 16, 16, 16],
        "100": [16, 16, 16, 16, 16, 19],
        "102": [16, 16, 16, 16, 16, 21],
        "104": [16, 16, 16, 16, 16, 23],
        "106": [16, 16, 16, 16, 19, 23],
        "109": [16, 16, 16, 16, 21, 23],
        "111": [16, 16, 16, 16, 23, 23],
        "113": [16, 16, 16, 19, 23, 23],
        "116": [16, 16, 16, 21, 23, 23],
        "118": [16, 16, 16, 23, 23, 23],
        "120": [16, 16, 19, 23, 23, 23],
        "123": [16, 16, 21, 23, 23, 23],
        "125": [16, 16, 23, 23, 23, 23],
        "127": [16, 19, 23, 23, 23, 23],
        "130": [16, 21, 23, 23, 23, 23],
        "132": [16, 23, 23, 23, 23, 23],
        "134": [19, 23, 23, 23, 23, 23],
        "137": [21, 23, 23, 23, 23, 23],
        "139": [23, 23, 23, 23, 23, 23]
      },
      "元素熟知": {
        "16": [16],
        "19": [19],
        "21": [21],
        "23": [23],
        "33": [16, 16],
        "35": [16, 19],
        "37": [16, 21],
        "40": [16, 23],
        "42": [19, 23],
        "44": [21, 23],
        "47": [23, 23],
        "49": [16, 16, 16],
        "51": [16, 16, 19],
        "54": [16, 16, 21],
        "56": [16, 16, 23],
        "58": [16, 19, 23],
        "61": [16, 21, 23],
        "63": [16, 23, 23],
        "65": [16, 16, 16, 16],
        "68": [16, 16, 16, 19],
        "70": [16, 16, 16, 21],
        "72": [16, 16, 16, 23],
        "75": [16, 16, 19, 23],
        "77": [16, 16, 21, 23],
        "79": [16, 16, 23, 23],
        "82": [16, 16, 16, 16, 16],
        "84": [16, 16, 16, 16, 19],
        "86": [16, 16, 16, 16, 21],
        "89": [16, 16, 16, 16, 23],
        "91": [16, 16, 16, 19, 23],
        "93": [16, 16, 16, 21, 23],
        "96": [16, 16, 16, 23, 23],
        "98": [16, 16, 16, 16, 16, 16],
        "100": [16, 16, 16, 16, 16, 19],
        "103": [16, 16, 16, 16, 16, 21],
        "105": [16, 16, 16, 16, 16, 23],
        "107": [16, 16, 16, 16, 19, 23],
        "110": [16, 16, 16, 16, 21, 23],
        "112": [16, 16, 16, 16, 23, 23],
        "114": [16, 16, 16, 19, 23, 23],
        "117": [16, 16, 16, 21, 23, 23],
        "119": [16, 16, 16, 23, 23, 23],
        "121": [16, 16, 19, 23, 23, 23],
        "124": [16, 16, 21, 23, 23, 23],
        "126": [16, 16, 23, 23, 23, 23],
        "128": [16, 19, 23, 23, 23, 23],
        "131": [16, 21, 23, 23, 23, 23],
        "133": [16, 23, 23, 23, 23, 23],
        "135": [19, 23, 23, 23, 23, 23],
        "138": [21, 23, 23, 23, 23, 23],
        "140": [23, 23, 23, 23, 23, 23]
      }
    }

  def difference_costume_json(self):  # コスチュームの動的な指定
    return {
      "202901": {
        "iconName": "UI_AvatarIcon_KleeCostumeWitch",
        "sideIconName": "UI_AvatarIcon_Side_KleeCostumeWitch",
        "nameTextMapHash": 2343491290
      },
      "201501": {
        "iconName": "UI_AvatarIcon_KaeyaCostumeDancer",
        "sideIconName": "UI_AvatarIcon_Side_KaeyaCostumeDancer",
        "nameTextMapHash": 177626138
      }
    }

  def locale(self):  # 読み込んだデータの日本語化
    LJsn = json.loads(
      urllib.request.urlopen(
        urllib.request.Request(
          'https://raw.githubusercontent.com/EnkaNetwork/API-docs/master/store/loc.json',
          headers={'User-Agent': UsrAgn})).read().decode(errors='ignore'))
    for percent in [ja for ja in LJsn['ja'] if 'PERCENT' in ja]:
      if '力' in LJsn['ja'][percent]:
        LJsn['ja'][percent] = LJsn['ja'][percent].replace('力', 'パーセンテージ')
      else:
        LJsn['ja'][percent] = LJsn['ja'][percent].replace(
          LJsn['ja'][percent][-1],
          '{}パーセンテージ'.format(LJsn['ja'][percent][-1]))
    return LJsn['ja']

  def character_json(self):  # キャラクター情報の取得
    return json.loads(
      urllib.request.urlopen(
        urllib.request.Request(
          'https://raw.githubusercontent.com/EnkaNetwork/API-docs/master/store/characters.json',
          headers={'User-Agent': UsrAgn})).read().decode(errors='ignore'))

  def character_pfps_json(self):  # キャラクターのアイコン取得
    return json.loads(
      urllib.request.urlopen(
        urllib.request.Request(
          'https://raw.githubusercontent.com/EnkaNetwork/API-docs/master/store/pfps.json',
          headers={'User-Agent': UsrAgn})).read().decode(errors='ignore'))

  def costume_json(self):  # コスチューム情報の動的な抽出
    CosJsn = json.loads(
      urllib.request.urlopen(
        urllib.request.Request(
          'https://raw.githubusercontent.com/EnkaNetwork/API-docs/master/store/costumes.json',
          headers={'User-Agent': UsrAgn})).read().decode(errors='ignore'))
    for key, value in self.difference_costume_json().items():
      CosJsn[key] = value
    return CosJsn

  def option_calculation(self, data: dict):  # 聖遺物の詳細を計算
    dup = self.mainoption()  # 聖遺物のメインオプション
    mapping = self.suboption()  # 聖遺物のサブオプション
    res = [None, None, None, None]
    keymap = list(map(str, data.keys()))
    is_dup = [(ctg, state) for ctg, state in data.items()
              if str(state) in dup[ctg]['ov']]
    counter_flag = 0
    dup_ctg = [i[0] for i in is_dup]
    maxium_state_ct = 9

    if not len(is_dup):
      for ctg, state in data.items():
        idx = keymap.index(ctg)
        res[idx] = mapping[ctg][str(state)]
      return res

    if len(is_dup) == 1:
      single_state = {c: s for c, s in data.items() if c not in dup_ctg}
      for ctg, state in single_state.items():
        idx = keymap.index(ctg)
        res[idx] = mapping[ctg][str(state)]
        counter_flag += len(mapping[ctg][str(state)])

      dup_state = {c: s for c, s in data.items() if c in dup_ctg}
      long = maxium_state_ct - counter_flag
      for ctg, state in dup_state.items():
        possiblity = dup[ctg][str(state)]
        for p in possiblity:
          if len(p) == long or len(p) == long - 1:
            idx = keymap.index(ctg)
            res[idx] = p
            return res
    if len(is_dup) == 2:
      single_state = {c: s for c, s in data.items() if c not in dup_ctg}
      for ctg, state in single_state.items():
        idx = keymap.index(ctg)
        res[idx] = mapping[ctg][str(state)]
        counter_flag += len(mapping[ctg][str(state)])

      dup_state = {c: s for c, s in data.items() if c in dup_ctg}
      long = maxium_state_ct - counter_flag

      sample = [[ctg, state] for ctg, state in dup_state.items()]

      possiblity1 = dup[sample[0][0]][str(sample[0][1])]
      possiblity2 = dup[sample[1][0]][str(sample[1][1])]

      p1 = [len(p) for p in possiblity1]
      p2 = [len(p) for p in possiblity2]

      p = itertools.product(p1, p2)
      r = None
      for v in p:
        if sum(v) == long or sum(v) == long - 1:
          r = v
          break
      idx1 = keymap.index(sample[0][0])
      idx2 = keymap.index(sample[1][0])
      res[idx1] = possiblity1[p1.index(v[0])]
      res[idx2] = possiblity2[p2.index(v[1])]
      return res
    if len(is_dup) == 3:
      single_state = {c: s for c, s in data.items() if c not in dup_ctg}
      for ctg, state in single_state.items():
        idx = keymap.index(ctg)
        res[idx] = mapping[ctg][str(state)]
        counter_flag += len(mapping[ctg][str(state)])
      dup_state = {c: s for c, s in data.items() if c in dup_ctg}
      long = maxium_state_ct - counter_flag
      sample = [[ctg, state] for ctg, state in dup_state.items()]
      possiblity1 = dup[sample[0][0]][str(sample[0][1])]
      possiblity2 = dup[sample[1][0]][str(sample[1][1])]
      possiblity3 = dup[sample[2][0]][str(sample[2][1])]
      p1 = [len(p) for p in possiblity1]
      p2 = [len(p) for p in possiblity2]
      p3 = [len(p) for p in possiblity3]
      p = itertools.product(p1, p2, p3)
      r = None
      for v in p:
        if sum(v) == long or sum(v) == long - 1:
          r = v
          break
      idx1 = keymap.index(sample[0][0])
      idx2 = keymap.index(sample[1][0])
      idx3 = keymap.index(sample[2][0])
      res[idx1] = possiblity1[p1.index(v[0])]
      res[idx2] = possiblity2[p2.index(v[1])]
      res[idx3] = possiblity3[p3.index(v[2])]
      return res
    if len(is_dup) == 4:
      dup_state = {c: s for c, s in data.items() if c in dup_ctg}
      long = maxium_state_ct - counter_flag
      sample = [[ctg, state] for ctg, state in dup_state.items()]
      possiblity1 = dup[sample[0][0]][str(sample[0][1])]
      possiblity2 = dup[sample[1][0]][str(sample[1][1])]
      possiblity3 = dup[sample[2][0]][str(sample[2][1])]
      possiblity4 = dup[sample[3][0]][str(sample[3][1])]
      p1 = [len(p) for p in possiblity1]
      p2 = [len(p) for p in possiblity2]
      p3 = [len(p) for p in possiblity3]
      p4 = [len(p) for p in possiblity4]
      p = itertools.product(p1, p2, p3, p4)
      r = None
      for v in p:
        if sum(v) == long or sum(v) == long - 1:
          r = v
          break
      idx1 = keymap.index(sample[0][0])
      idx2 = keymap.index(sample[1][0])
      idx3 = keymap.index(sample[2][0])
      idx4 = keymap.index(sample[3][0])
      res[idx1] = possiblity1[p1.index(v[0])]
      res[idx2] = possiblity2[p2.index(v[1])]
      res[idx3] = possiblity3[p3.index(v[2])]
      res[idx4] = possiblity4[p4.index(v[3])]
      return res

  def playerinfo(self):  # プレイヤー情報の一部を取得
    player_infomation = self.player_data[
      'playerInfo']  # 取得したデータから「playerInfo」を取得
    if 'showAvatarInfoList' in player_infomation:  # 取得した「playerInfo」から「showAvatarInfoList」がある場合は以下を実行
      for avater in player_infomation[
          'showAvatarInfoList']:  # 取得したプレイヤーデータからキャラクター名を日本語へ変換
        avater['name'] = self.locale_jp['{}'.format(
          self.characters_json['{}'.format(
            avater['avatarId'])]['NameTextMapHash'])]

    return player_infomation

  def full_playerinfo(self, avateriD):  # プレイヤーデータの完全版を取得
    avatar_data = []  # 事前に宣言
    if 'avatarInfoList' in self.player_data:  # 取得したデータから「avaterInfoList」がある場合以下を実行
      avatar_data = \
      list(filter(lambda item: item.get('avatarId') == int(avateriD), self.player_data['avatarInfoList']))[0]
    return avatar_data

  def decimal_float(self, obj):  # デシマルをフロートへ変換
    if isinstance(obj, Decimal):
      return float(obj)

  def create_buildcard(self, avaterinfo, score_state):
    # ここからキャラクターデータ
    try:  # キャラクタースキルセットIDを判別。
      if len('{}'.format(
          avaterinfo['skillDepotId'])) == 3:  # キャラクタースキルセットIDが3なら以下を実行
        character_id = '{}-{}'.format(
          avaterinfo['avatarId'], avaterinfo['skillDepotId']
        )  # キャラクタースキルセットIDは[avatarid]-[skillDepotId]という形式で取得できる
        character_skill_icons = [
          '{}.png'.format(
            list(self.characters_json[character_id]['Skills'].values())[2]),
          '{}.png'.format(
            list(self.characters_json[character_id]['Skills'].values())[0]),
          '{}.png'.format(
            list(self.characters_json[character_id]['Skills'].values())[1])
        ]  # キャラクター天賦画像(画像上半分の真ん中にある細長い長方形の上半分)
      else:
        character_id = '{}'.format(avaterinfo['avatarId'])
        character_skill_icons = [
          '{}.png'.format(skill)
          for skill in self.characters_json[character_id]['Skills'].values()
        ]  # キャラクター天賦画像(画像上半分の真ん中にある細長い長方形上半分)
    except:
      character_id = '{}'.format(avaterinfo['avatarId'])
      character_skill_icons = [
        '{}.png'.format(skill)
        for skill in self.characters_json[character_id]['Skills'].values()
      ]  # キャラクター天賦画像(画像上半分の真ん中にある細長い長方形の上半分)
    element_locale = {
      'Fire': '炎',
      'Water': '水',
      'Electric': '雷',
      'Ice': '氷',
      'Wind': '風',
      'Rock': '岩',
      'Grass': '草'
    }  # 各元素の読み方を決める
    character_element = element_locale[self.characters_json[character_id]
                                       ['Element']]  # 作成するキャラクターの元素の読み方を決める
    character_name = self.locale_jp['{}'.format(
      self.characters_json[character_id]['NameTextMapHash'])]  # キャラクター名
    try:
      character_icon = '{}.png'.format(
        self.characters_json[character_id]['Costumes']['{}'.format(
          avaterinfo['costumeId'])]['sideIconName'].replace(
            'UI_AvatarIcon_Side_', 'UI_Costume_'))  # キャラクターがコスチュームを付けていた場合の対応
    except:
      character_icon = '{}.png'.format(
        '{}'.format(
          self.characters_json[character_id]['SideIconName']).replace(
            'UI_AvatarIcon_Side_', 'UI_Gacha_AvatarImg_')
      )  # キャラクターの画像(UI_AvatarIcon_Side_をUI_Gacha_AvatarImg_に変更し、横顔画像から正面の顔の画像を取得)
    try:
      character_const = len(
        avaterinfo['talentIdList']
      ) - 1  # キャラクター凸数(画像上半分の真ん中にある細長い長方形の下半分の鍵アイコンが入ってる部分)
    except:
      character_const = -1
    character_const_icons = [
      '{}.png'.format(cicon)
      for cicon in self.characters_json[character_id]['Consts']
    ]  # キャラクター凸画像(画像上半分の真ん中にある細長い長方形の下半分の鍵アイコンが入ってる部分のアイコン画像)
    character_level = '{}'.format(
      avaterinfo['propMap']['4001']['val'])  # キャラクターのレベル
    character_fav_rate = '{}'.format(
      avaterinfo['fetterInfo']['expLevel'])  # キャラクターの好感度
    character_hp = int(
      Decimal(avaterinfo['fightPropMap']['2000']).quantize(
        Decimal('0'), rounding=ROUND_HALF_UP))  # キャラクターのHP
    character_attack_rate = int(
      Decimal(avaterinfo['fightPropMap']['2001']).quantize(
        Decimal('0'), rounding=ROUND_HALF_UP))  # キャラクターの攻撃力
    character_defence_rate = int(
      Decimal(avaterinfo['fightPropMap']['2002']).quantize(
        Decimal('0'), rounding=ROUND_HALF_UP))  # キャラクターの防御力
    character_element_mastery = int(
      Decimal(avaterinfo['fightPropMap']['28']).quantize(
        Decimal('0'), rounding=ROUND_HALF_UP))  # キャラクターの熟知
    character_charge_efficiency = Decimal(
      avaterinfo['fightPropMap']['23'] * 100).quantize(
        Decimal('0.1'), rounding=ROUND_HALF_UP)  # キャラクターの元素チャージ効率
    character_critical_rate = Decimal(
      avaterinfo['fightPropMap']['20'] * 100).quantize(
        Decimal('0.1'), rounding=ROUND_HALF_UP)  # キャラクターの会心率
    character_critical_damage_rate = Decimal(
      avaterinfo['fightPropMap']['22'] * 100).quantize(Decimal('0.1'),
                                                       rounding=ROUND_HALF_UP)
    character_element_buff_json = {
      '30': '物理ダメージ',
      '40': '炎元素ダメージ',
      '41': '雷元素ダメージ',
      '42': '水元素ダメージ',
      '43': '草元素ダメージ',
      '44': '風元素ダメージ',
      '45': '岩元素ダメージ',
      '46': '氷元素ダメージ'
    }  # キャラクターの元素ダメージの種類
    character_element_buff = list(character_element_buff_json.keys()
                                  )  # character_element_buff_jsonのkeyをリスト化
    character_element_max_buff_key = '30'
    character_element_max_value = 0
    for sk in character_element_buff:  # キャラクターの元素ダメージを決める
      if avaterinfo['fightPropMap'][
          sk] > character_element_max_value:  # キャラクターの元素番号が30よりおおきいか
        character_element_max_value = avaterinfo['fightPropMap'][
          sk]  # 大きいなら最大値はキャラクターの元素番号に設定
        character_element_max_buff_key = sk  # 大きいならKeyは現在のskに設定
    character_element_buff_name = '{}'.format(
      character_element_buff_json[character_element_max_buff_key]
    )  # 元素ダメージの読み方を設定
    character_element_buff_value = '{}'.format(
      Decimal(avaterinfo['fightPropMap'][character_element_max_buff_key] *
              100).quantize(Decimal('0.1'),
                            rounding=ROUND_HALF_UP))  # 元素ダメージの値を設定
    if 'proudSkillExtraLevelMap' in avaterinfo:  # 凸数の開放具合を設定
      try:  # エラーなら鍵アイコンにする
        PMap = self.characters_json['{}'.format(character_id)]['ProudMap']
        for sk in list(map(int, avaterinfo['skillLevelMap'].keys())):
          try:
            if PMap['{}'.format(sk)] in list(
                map(int, avaterinfo['proudSkillExtraLevelMap'].keys())):
              avaterinfo['skillLevelMap']['{}'.format(sk)] += avaterinfo[
                'proudSkillExtraLevelMap'][PMap['{}'.format(sk)]]
          except:
            pass
      except:
        pass
    character_talent_normal = '{}'.format(
      avaterinfo['skillLevelMap']['{}'.format(self.characters_json['{}'.format(
        character_id)]['SkillOrder'][0])])  # キャラクター天賦: 通常攻撃
    character_talent_skill = '{}'.format(
      avaterinfo['skillLevelMap']['{}'.format(self.characters_json['{}'.format(
        character_id)]['SkillOrder'][1])])  # キャラクター天賦: スキル攻撃
    character_talent_explosion = '{}'.format(
      avaterinfo['skillLevelMap']['{}'.format(self.characters_json['{}'.format(
        character_id)]['SkillOrder'][2])])  # キャラクター天賦: 爆発攻撃
    character_base_hp = int(
      Decimal(avaterinfo['fightPropMap']['1']).quantize(
        Decimal('0'), rounding=ROUND_HALF_UP))  # キャラクター基礎HP
    character_base_attack = int(
      Decimal(avaterinfo['fightPropMap']['4']).quantize(
        Decimal('0'), rounding=ROUND_HALF_UP))  # キャラクター基礎攻撃力
    character_base_defence = int(
      Decimal(avaterinfo['fightPropMap']['7']).quantize(
        Decimal('0'), rounding=ROUND_HALF_UP))  # キャラクター基礎防御力
    # ここまでキャラクターデータ
    # ここから武器データ
    weapon = list(
      filter(lambda item: item.get('weapon'),
             avaterinfo['equipList']))[0]  # 武器のデータ
    weapon_name = self.locale_jp[weapon['flat']['nameTextMapHash']]  # 武器の名前
    weapon_level = weapon['weapon']['level']  # 武器のレベル
    try:
      weapon_constellations = list(
        weapon['weapon']['affixMap'].values())[0] + 1  # 武器の凸数
    except:
      weapon_constellations = 2
    weapon_rarelity = weapon['flat']['rankLevel']  # 武器のレアリティ
    weapon_attack_rate = list(
      filter(lambda item: item['appendPropId'] == 'FIGHT_PROP_BASE_ATTACK',
             weapon['flat']['weaponStats']))[0]['statValue']  # 武器の基礎攻撃力
    try:
      weapon_sub_name = self.locale_jp[list(
        filter(lambda item: item['appendPropId'] != 'FIGHT_PROP_BASE_ATTACK',
               weapon['flat']['weaponStats']))[0]['appendPropId']]  # 武器の名前を設定
    except:  # エラーが出たならなしに設定
      weapon_sub_name = None
    try:
      weapon_sub_value = list(
        filter(lambda item: item['appendPropId'] != 'FIGHT_PROP_BASE_ATTACK',
               weapon['flat']['weaponStats']))[0]['statValue']  # 武器のプロパティを設定
    except:
      weapon_sub_value = '1'
    weapon_icon = '{}.png'.format(weapon['flat']['icon'])  # 武器アイコンを設定
    # ここまで武器データ
    # ここから聖遺物データ
    artifact_state = {
      'HP': 'HPパーセンテージ',
      '攻撃': '攻撃パーセンテージ',
      '防御': '防御パーセンテージ',
      'チャージ': '元素チャージ効率',
      '元素熟知': '元素熟知'
    }  # 聖遺物のメインオプションを設定
    artifact_total_score = 0
    artifacts_score = {
      'total': 0.0,
      'state': score_state,
      'flower': 0.0,
      'wing': 0.0,
      'clock': 0.0,
      'cup': 0.0,
      'crown': 0.0
    }  # 各聖遺物のスコアを設定
    artifact_list = list(
      filter(lambda item: item.get('reliquary'), avaterinfo['equipList']))
    artifact_type_name = {
      'EQUIP_BRACER': 'flower',
      'EQUIP_NECKLACE': 'wing',
      'EQUIP_SHOES': 'clock',
      'EQUIP_RING': 'cup',
      'EQUIP_DRESS': 'crown'
    }  # JSONの値の呼び方を設定
    artifacts = {
      'flower': {
        'type': '',
        'icon': '',
        'level': 1,
        'rarelity': 1,
        'mainoption': {
          'optionName': '',
          'value': 0
        },
        'suboption': []
      },
      'wing': {
        'type': '',
        'icon': '',
        'level': 1,
        'rarelity': 1,
        'mainoption': {
          'optionName': '',
          'value': 0
        },
        'suboption': []
      },
      'clock': {
        'type': '',
        'icon': '',
        'level': 1,
        'rarelity': 1,
        'mainoption': {
          'optionName': '',
          'value': 0
        },
        'suboption': []
      },
      'cup': {
        'type': '',
        'icon': '',
        'level': 1,
        'rarelity': 1,
        'mainoption': {
          'optionName': '',
          'value': 0
        },
        'suboption': []
      },
      'crown': {
        'type': '',
        'icon': '',
        'level': 1,
        'rarelity': 1,
        'mainoption': {
          'optionName': '',
          'value': 0
        },
        'suboption': []
      }
    }  # 各聖遺物のjsonをセルフ作成
    for _Artifact in artifact_list:
      # 聖遺物のメインオプションを設定
      try:
        artifact = artifacts[artifact_type_name[_Artifact['flat']
                                                ['equipType']]]
      except:
        artifact = None
      if not artifact == None:  # 聖遺物情報があるかないか。あるなら以下実行
        artifact['type'] = self.locale_jp[_Artifact['flat']
                                          ['setNameTextMapHash']]  # 聖遺物のタイプ
        artifact['icon'] = '{}.png'.format(
          _Artifact['flat']['icon'])  # 聖遺物のアイコン名
        artifact['level'] = _Artifact['reliquary']['level'] - 1  # 聖遺物のレベル
        artifact['rarelity'] = _Artifact['flat']['rankLevel']
        artifact['mainoption']['optionName'] = self.locale_jp[
          _Artifact['flat']['reliquaryMainstat']['mainPropId']]
        artifact['mainoption']['value'] = _Artifact['flat'][
          'reliquaryMainstat']['statValue']
        # 聖遺物のサブオプションを設定
        artifactscore = 0
        for i, s in enumerate(_Artifact['flat']['reliquarySubstats']):
          artifact['suboption'].append({})
          artifact['suboption'][i]['optionName'] = self.locale_jp[
            s['appendPropId']]
          artifact['suboption'][i]['value'] = s['statValue']
          if artifact['suboption'][i]['optionName'] in [
              artifact_state[score_state], '会心ダメージ'
          ]:
            if artifact['suboption'][i]['optionName'] == '元素熟知':
              artifactscore += Decimal(artifact['suboption'][i]['value'] *
                                       0.25)
            else:
              artifactscore += Decimal(artifact['suboption'][i]['value'])
          elif artifact['suboption'][i]['optionName'] in ['会心率']:
            artifactscore += Decimal(artifact['suboption'][i]['value'] * 2)
          artifacts_score[artifact_type_name[
            _Artifact['flat']['equipType']]] = Decimal(artifactscore).quantize(
              Decimal('0.1'), rounding=ROUND_HALF_UP)
          # ここまで聖遺物のサブオプションの設定
        artifact_total_score += Decimal(artifactscore)
    # ここまで聖遺物のスコアを計算
    artifacts_score['total'] = '{:.1f}'.format(
      Decimal(artifact_total_score).quantize(
        Decimal('0.1'), rounding=ROUND_HALF_UP))  # 各聖遺物を合わせたスコア
    artifacts_score = json.loads(
      json.dumps(artifacts_score,
                 ensure_ascii=False,
                 default=self.decimal_float))
    artifacts = json.loads(
      json.dumps(artifacts, ensure_ascii=False, default=self.decimal_float))
    with self.ArtifactFont() as Font:  # フォントファイルを一時フォルダへ展開後、フォントファイルを読み込み
      artifact_font = lambda size: ImageFont.truetype(Font, size)
      BaseImage = Image.open(
        io.BytesIO(self.artifact_base_image(character_element))).convert(
          'RGBA')  # ベース画像の読み込み
      # キャラクター画像の編集
      if character_icon == 'UI_Gacha_AvatarImg_PlayerBoy.png':
        character_image = Image.open(
          io.BytesIO(self.artifact_assets(character_icon))).convert('RGBA')
      elif character_icon == 'UI_Gacha_AvatarImg_PlayerGirl.png':
        character_image = Image.open(
          io.BytesIO(self.artifact_assets(character_icon))).convert('RGBA')
      else:
        character_image = Image.open(
          io.BytesIO(
            urllib.request.urlopen(
              urllib.request.Request(
                'https://enka.network/ui/{}'.format(character_icon),
                headers={'User-Agent': UsrAgn})).read())).convert(
                  'RGBA')  # キャラクター画像をEnkaNetworkから取得
      if character_icon == 'UI_Gacha_AvatarImg_PlayerBoy.png' or character_icon == 'UI_Gacha_AvatarImg_PlayerGirl.png':
        if character_icon == 'UI_Gacha_AvatarImg_PlayerGirl.png':
          character_image = character_image.crop(
            (555, 150, 1350, 650))  # キャラクターの画像を切り抜き
        else:
          character_image = character_image.crop(
            (0, 80, 1350, 650))  # キャラクターの画像を切り抜き
      else:
        character_image = character_image.crop(
          (585, 165, 1350, 650))  # キャラクターの画像を切り抜き
      character_image = character_image.resize((925, 620))  # キャラクターの画像をリサイズ
      character_avatar_image_mask = character_image.copy()
      character_paste = Image.new('RGBA', BaseImage.size,
                                  (255, 255, 255, 0))  # キャラクター画像を編集するための土台作り
      character_paste.paste(character_image, (33, 12),
                            mask=character_avatar_image_mask)  # キャラクター画像を土台と合成
      character_status_blur = Image.open(
        io.BytesIO(self.artifact_assets('CharacterBlur'))).convert(
          'RGBA')  # ぼかし画像
      character_status_blur_paste = Image.new('RGBA', BaseImage.size,
                                              (255, 255, 255, 0))
      character_status_blur.putalpha(56)  # 不透明度を設定
      character_status_blur_paste.paste(character_status_blur,
                                        (56, 105))  # キャラクターのステータスの背景にぼかしを入れる
      character_paste = Image.alpha_composite(
        character_paste, character_status_blur_paste
      )  # キャラクターの下に表示される好感度などのステータスの背景をブラーをかけてキャラクター画像と合成
      BaseImage = Image.alpha_composite(BaseImage,
                                        character_paste)  # ベース画像とキャラクター画像を合成
      # 武器画像の編集
      weapon_image = Image.open(
        io.BytesIO(
          urllib.request.urlopen(
            urllib.request.Request(
              'https://enka.network/ui/{}'.format(weapon_icon),
              headers={'User-Agent': UsrAgn})).read())).convert('RGBA').resize(
                (128, 128))  # EnkaNetworkから武器の画像データを取得
      weapon_image_paste = Image.new('RGBA', BaseImage.size,
                                     (255, 255, 255, 0))  # 武器の土台を作成
      weapon_image_mask = weapon_image.copy()  # 武器の画像データをコピーしてマスクの作成
      weapon_image_paste.paste(weapon_image, (1185, 60),
                               mask=weapon_image_mask)  # 変更
      BaseImage = Image.alpha_composite(BaseImage,
                                        weapon_image_paste)  # ベース画像と武器の画像を合成
      # 武器のレアリティ画像の編集
      try:  # 武器のレアリティ画像をRBGAに変換して読み込む
        weapon_rarelity_image = Image.open(
          io.BytesIO(self.artifact_rarelity(
            '{}'.format(weapon_rarelity)))).convert('RGBA')
      except:  # もし、エラーが出るなら武器のレアリティ画像をそのまま読み込む
        weapon_rarelity_image = Image.open(
          io.BytesIO(self.artifact_rarelity('{}'.format(weapon_rarelity))))
      weapon_rarelity_image = weapon_rarelity_image.resize(
        (int(weapon_rarelity_image.width * 0.97),
         int(weapon_rarelity_image.height * 0.97)))
      weapon_rarelity_image_paste = Image.new(
        'RGBA', BaseImage.size, (255, 255, 255, 0))  # 武器のレアリティ土台を作成
      weapon_rarelity_image_mask = weapon_rarelity_image.copy(
      )  # 武器のレアリティ画像からマスクを作成
      weapon_rarelity_image_paste.paste(weapon_rarelity_image, (1182, 182),
                                        mask=weapon_rarelity_image_mask)  # 変更
      BaseImage = Image.alpha_composite(
        BaseImage, weapon_rarelity_image_paste)  # ベース画像に武器のレアリティ画像を貼り付け
      character_talent_base = Image.open(
        io.BytesIO(self.artifact_assets('TalentBack')))  # 天賦のベース画像
      character_talent_paste = Image.new(
        'RGBA', BaseImage.size, (255, 255, 255, 0))  # 天賦のベース画像を合成するためのベース画像
      character_talent_base = character_talent_base.resize(
        (int(character_talent_base.width / 1.5),
         int(character_talent_base.height / 1.5)))  # 天賦のベース画像をリサイズ
      for i, t in enumerate(character_skill_icons):  # 天賦ベース画像とスキルアイコンとの合成
        _talent_paste = Image.new(
          'RGBA', character_talent_base.size,
          (255, 255, 255, 0))  # 天賦のベース画像に合わせてベース画像を作成
        _talent = Image.open(
          io.BytesIO(
            urllib.request.urlopen(
              urllib.request.Request(
                'https://enka.network/ui/{}'.format(t),
                headers={'User-Agent': UsrAgn})).read())).resize(
                  (50, 50)).convert('RGBA')  # EnkaNetworkから各種天賦画像を取得
        _talent_mask = _talent.copy()  # 取得した天賦画像でマスクの作成
        _talent_paste.paste(
          _talent,
          (_talent_paste.width // 2 - 25, _talent_paste.height // 2 - 25),
          mask=_talent_mask)  # 新規ベース画像に取得した天賦画像をリサイズして貼り付け
        _talent_object = Image.alpha_composite(
          character_talent_base, _talent_paste)  # 天賦画像と新規天賦ベース画像を合成
        character_talent_paste.paste(_talent_object,
                                     (1005, 10 + i * 86))  # 天賦画像を指定の位置で合成
      BaseImage = Image.alpha_composite(BaseImage, character_talent_paste)
      character_constellations_base = Image.open(
        io.BytesIO(self.artifact_constellation(character_element))).resize(
          (90, 90)).convert('RGBA')  # キャラクターの凸数のベース画像
      character_constellations_lock_base = Image.open(
        io.BytesIO(
          self.artifact_constellation(
            '{}LOCK'.format(character_element)))).convert(
              'RGBA')  # キャラクターの凸数のロックされた画像のベース
      character_constellations_lock_base_mask = character_constellations_lock_base.copy(
      )  # ロックされた凸数のマスクを作成
      character_constellations_paste = Image.new(
        'RGBA', BaseImage.size, (255, 255, 255, 0))  # 凸数の新しいベース画像を作成
      for c, t in enumerate(character_const_icons):
        if c > int(character_const):  # キャラクターの凸数が「c」より小さいなら以下を実行
          character_constellations_paste.paste(
            character_constellations_lock_base, (1016, 235 + (c + 1) * 93),
            mask=character_constellations_lock_base_mask
          )  # キャラクターのロックされた凸数をベースへ貼り付け
        else:  # キャラクターの凸数が「c」より大きいなら以下を実行
          _character_const = Image.open(
            io.BytesIO(
              urllib.request.urlopen(
                urllib.request.Request(
                  'https://enka.network/ui/{}'.format(t),
                  headers={'User-Agent':
                           UsrAgn})).read())).convert('RGBA').resize(
                             (45, 45))  # キャラクターの凸数に応じて凸の画像を取得
          _character_const_paste = Image.new(
            'RGBA', character_constellations_base.size,
            (255, 255, 255, 0))  # 凸数のベース画像をベースに新しい画像を作成
          _character_const_mask = _character_const.copy()  # 凸数のマスクを作成
          _character_const_paste.paste(
            _character_const, (int(_character_const_paste.width / 2) - 25,
                               int(_character_const_paste.height / 2) - 23),
            mask=_character_const_mask)  # キャラクターの凸数をマスクを指定しつつ合成
          _character_const_object = Image.alpha_composite(
            character_constellations_base,
            _character_const_paste)  # 凸数のベース画像と上の合成した凸数の画像とさらに合成
          character_constellations_paste.paste(
            _character_const_object,
            (1010, 235 + (c + 1) * 93))  # 凸数を合成したデータを指定の位置に指定した間隔で貼り付け
      BaseImage = Image.alpha_composite(
        BaseImage, character_constellations_paste)  # ベース画像へ凸数を反映
      DR = ImageDraw.Draw(BaseImage)  # ベース画像にテキストを埋め込み
      DR.text((45, 50), character_name, font=artifact_font(48))  # キャラクター名を書き込み
      character_levellength = DR.textlength(
        'Lv.{}'.format(character_level),
        font=artifact_font(25))  # キャラクターのレベルの文章の長さを取得
      character_friendShiplength = DR.textlength(
        character_fav_rate, font=artifact_font(25))  # キャラクターの好感度の文章の長さを取得
      DR.text((60, 105),
              'Lv.{}'.format(character_level),
              font=artifact_font(25))  # キャラクターのレベルを書き込み
      DR.rounded_rectangle(
        (60 + character_levellength + 5, 74,
         77 + character_levellength + character_friendShiplength, 102),
        radius=0,
        outline=None,
        width=0)  # 好感度をレベルの文の長さに間隔を開けてから記入
      character_friendShipicon = Image.open(
        io.BytesIO(self.artifact_assets('Love'))).convert(
          'RGBA')  # キャラクターの好感度アイコンを読み込み
      character_friendShipicon = character_friendShipicon.resize(
        (int(character_friendShipicon.width *
             (24 / character_friendShipicon.height)), 24))  # 好感度アイコンをリサイズ
      character_friendShipicon_mask = character_friendShipicon.copy(
      )  # 好感度アイコンのマスクを作成
      BaseImage.paste(
        character_friendShipicon, (74 + int(character_levellength), 108),
        mask=character_friendShipicon_mask)  # ベース画像に好感度アイコンを貼り付け
      DR.text((103 + character_levellength, 106),
              character_fav_rate,
              font=artifact_font(25))  # 好感度を書き込み
      DR.text((1033, 86),
              'Lv.{}'.format(character_talent_normal),
              font=artifact_font(17),
              fill='aqua'
              if int(character_talent_normal) >= 10 else None)  # 通常天賦の書き込み
      DR.text((1033, 176),
              'Lv.{}'.format(character_talent_skill),
              font=artifact_font(17),
              fill='aqua'
              if int(character_talent_skill) >= 10 else None)  # スキル天賦の書き込み
      DR.text((1033, 264),
              'Lv.{}'.format(character_talent_explosion),
              font=artifact_font(17),
              fill='aqua' if int(character_talent_explosion) >= 10 else
              None)  # 元素爆発天賦の書き込み
      character_status_json = {
        'HP': character_hp,
        '攻撃力': character_attack_rate,
        '防御力': character_defence_rate,
        '元素熟知': character_element_mastery,
        '会心率': character_critical_rate,
        '会心ダメージ': character_critical_damage_rate,
        '元素チャージ効率': character_charge_efficiency,
        character_element_buff_name: character_element_buff_value
      }  # キャラクターのステータスをまとめたもの
      character_status_base_json = {
        'HP': character_base_hp,
        '攻撃力': character_base_attack,
        '防御力': character_base_defence
      }  # キャラクターの基礎ステータスをまとめたもの

      def genbasetext(state):
        sumv = character_status_json[state]
        plusv = sumv - character_status_base_json[state]
        basev = character_status_base_json[state]
        return f"+{format(plusv, ',')}", f"{format(basev, ',')}", DR.textlength(
          f"+{format(plusv, ',')}",
          font=artifact_font(12)), DR.textlength(f"{format(basev, ',')}",
                                                 font=artifact_font(12))

      Disper = [
        '会心率', '会心ダメージ', '攻撃パーセンテージ', '防御パーセンテージ', 'HPパーセンテージ',
        '水元素ダメージ', '物理ダメージ', '風元素ダメージ', '岩元素ダメージ', '炎元素ダメージ',
        '与える治癒効果', '与える治療効果', '雷元素ダメージ', '氷元素ダメージ', '草元素ダメージ', '与える治癒効果',
        '元素チャージ効率'
      ]
      StateOption = ('HP', '攻撃力', '防御力', '元素熟知', '会心率', '会心ダメージ',
                     '元素チャージ効率')
      for k, v in character_status_json.items():  # 元素ダメージごとの書き込み
        if k in [
            '氷元素ダメージ', '水元素ダメージ', '岩元素ダメージ', '草元素ダメージ', '風元素ダメージ',
            '炎元素ダメージ', '物理ダメージ', '与える治癒効果', '雷元素ダメージ'
        ] and v == 0:
          k = '{}元素ダメージ'.format(character_element)
        try:
          i = StateOption.index(k)
        except:
          i = 7
          DR.text((1261, 713), k, font=artifact_font(40))
          '''
          
          _k = unicodedata.normalize('NFKC', k)
          print(k)
          print(k.encode('unicode_escape').decode())
          print('物理ダメージ'.encode('unicode_escape').decode())
          print(_k.encode('unicode_escape').decode())
          '''

          ElementOpIcon = Image.open(
            io.BytesIO(self.artifact_emotes(unicodedata.normalize('NFKC',
                                                                  k)))).resize(
                                                                    (40, 40))
          ElementOpIconPaste = Image.new('RGBA', BaseImage.size,
                                         (255, 255, 255, 0))
          ElementOpIconPaste.paste(ElementOpIcon, (1199, 713))
          BaseImage = Image.alpha_composite(BaseImage, ElementOpIconPaste)
          DR = ImageDraw.Draw(BaseImage)
        if k not in Disper:
          character_state_len = DR.textlength(format(v, ","),
                                              artifact_font(40))
          DR.text((1830 - character_state_len, 286 + i * 61),
                  format(v, ","),
                  font=artifact_font(40))
        else:
          if k in [
              '氷元素ダメージ', '水元素ダメージ', '岩元素ダメージ', '草元素ダメージ', '風元素ダメージ',
              '炎元素ダメージ', '物理ダメージ', '与える治癒効果', '雷元素ダメージ'
          ]:
            character_state_len = DR.textlength(f'{float(v)}%',
                                                artifact_font(40))
            DR.text((1830 - character_state_len, 271 + i * 63),
                    f'{float(v)}%',
                    font=artifact_font(40))
          else:
            character_state_len = DR.textlength(f'{float(v)}%',
                                                artifact_font(40))
            DR.text((1830 - character_state_len, 270 + i * 62),
                    f'{float(v)}%',
                    font=artifact_font(40))
        if k in ['HP', '防御力', '攻撃力']:
          HPPls, HPBase, HPSize, HPBSize = genbasetext(k)
          DR.text((1830 - HPSize, 335 + i * 59),
                  HPPls,
                  fill=(0, 255, 0, 180),
                  font=artifact_font(12))
          DR.text((1830 - HPSize - HPBSize, 335 + i * 59),
                  HPBase,
                  font=artifact_font(12),
                  fill=(255, 255, 255, 180))
      DR.text((1390, 47), weapon_name, font=artifact_font(30))
      weapon_length = DR.textlength(f'Lv.{weapon_level}',
                                    font=artifact_font(24))
      DR.rounded_rectangle((1582, 80, 1582 + weapon_length + 4, 108),
                           radius=0,
                           outline=None,
                           width=0)
      DR.text((1390, 82), f'Lv.{weapon_level}', font=artifact_font(24))
      w_baseAttack = Image.open(io.BytesIO(
        self.artifact_emotes('基礎攻撃力'))).convert('RGBA').resize((23, 23))
      w_baseAttack_mask = w_baseAttack.copy()
      BaseImage.paste(w_baseAttack, (1395, 120), mask=w_baseAttack_mask)
      DR.text((1420, 118),
              '基礎攻撃力  {}'.format(weapon_attack_rate),
              font=artifact_font(23))  # 武器の基礎攻撃力を記載
      OptionMap = {
        '攻撃パーセンテージ': '攻撃%',
        '防御パーセンテージ': '防御%',
        '元素チャージ効率': '元チャ効率',
        'HPパーセンテージ': 'HP%'
      }
      if weapon_sub_name != None:  # 武器のサブ名が有効なら以下を実行
        w_baseAttack = Image.open(
          io.BytesIO(
            self.artifact_emotes(weapon_sub_name))).convert('RGBA').resize(
              (23, 23))
        w_baseAttack_mask = w_baseAttack.copy()
        BaseImage.paste(w_baseAttack, (1395, 155), mask=w_baseAttack_mask)
        try:
          DR.text(
            (1420, 153),
            f'{OptionMap.get(weapon_sub_name) or weapon_sub_name}  {str(weapon_sub_value) + "%" if weapon_sub_name in Disper else format(weapon_sub_value, ",")}',
            font=artifact_font(23))
        except:
          DR.text(
            (1420, 153),
            f'{weapon_sub_name}  {str(weapon_sub_value) + "%" if weapon_sub_name in Disper else format(weapon_sub_value, ",")}',
            font=artifact_font(23))
      DR.rounded_rectangle((1430, 45, 1470, 70),
                           radius=0,
                           outline=None,
                           width=0)
      DR.text((1180, 46), f'R{weapon_constellations}', font=artifact_font(24))
      scorelen = DR.textlength(f'{artifacts_score["total"]}',
                               artifact_font(75))  # 聖遺物スコアの文字数を計算
      DR.text((440 - scorelen // 2, 723),
              str(artifacts_score["total"]),
              font=artifact_font(100))  # 聖遺物スコアを100pixelで表記
      score_conversion_len = DR.textlength(
        '{}換算'.format(artifacts_score["state"]),
        font=artifact_font(24))  # 換算表記の文字数を計算
      DR.text((916 - score_conversion_len, 840),
              '{}換算'.format(artifacts_score["state"]),
              font=artifact_font(24))  # 聖遺物を評価する方式を表記
      # トータルスコアのランク決め
      if float(artifacts_score["total"]) >= 220:
        scoreEv = Image.open(io.BytesIO(self.artifact_grades('SS')))
      elif float(artifacts_score["total"]) >= 200:
        scoreEv = Image.open(io.BytesIO(self.artifact_grades('S')))
      elif float(artifacts_score["total"]) >= 180:
        scoreEv = Image.open(io.BytesIO(self.artifact_grades('A')))
      else:
        scoreEv = Image.open(io.BytesIO(self.artifact_grades('B')))
      scoreEv = scoreEv.convert('RGBA').resize(
        (scoreEv.width // 8, scoreEv.height // 8))
      evmask = scoreEv.copy()
      BaseImage.paste(scoreEv, (850, 708), mask=evmask)
      ArtifactType = []
      for i, part in enumerate(['flower', "wing", "clock", "cup",
                                "crown"]):  # 聖遺物の画像を合成していく
        artifact_details = artifacts[part]
        artifact_icons = artifacts[part]['icon']
        if artifact_icons == '':
          continue
        else:
          ArtifactType.append(artifact_details['type'])
          artifact_preview_paste = Image.new(
            'RGBA', BaseImage.size, (255, 255, 255, 0))  # 聖遺物の画像の土台を作成
          artifact_preview = Image.open(
            io.BytesIO(
              urllib.request.urlopen(
                urllib.request.Request(
                  'https://enka.network/ui/{}'.format(artifact_icons),
                  headers={'User-Agent':
                           UsrAgn})).read())).convert('RGBA').resize(
                             (256, 256))  # 聖遺物の画像をEnakNetworkから取得
          artifact_preview_Enhance = ImageEnhance.Brightness(artifact_preview)
          artifact_preview = artifact_preview_Enhance.enhance(0.6)
          artifact_preview_mask = artifact_preview.copy()
          artifact_preview.putalpha(204)
          if part in ['flower']:  # 聖遺物の花をベースに貼り付け
            concurrent.futures.ThreadPoolExecutor(
              os.cpu_count() * 99999).submit(artifact_preview_paste.paste,
                                             artifact_preview,
                                             (50 + 420 * i, 901),
                                             mask=artifact_preview_mask)
          elif part in ['wing']:  # 聖遺物の羽をベースに貼り付け
            concurrent.futures.ThreadPoolExecutor(
              os.cpu_count() * 99999).submit(artifact_preview_paste.paste,
                                             artifact_preview,
                                             (-12 + 420 * i, 906),
                                             mask=artifact_preview_mask)
          elif part in ['cup']:  # 聖遺物の盃をベースに貼り付け
            concurrent.futures.ThreadPoolExecutor(
              os.cpu_count() * 99999).submit(artifact_preview_paste.paste,
                                             artifact_preview,
                                             (-105 + 420 * i, 896),
                                             mask=artifact_preview_mask)
          elif part in ['crown']:  # 聖遺物の冠をベースに貼り付け
            concurrent.futures.ThreadPoolExecutor(
              os.cpu_count() * 99999).submit(artifact_preview_paste.paste,
                                             artifact_preview,
                                             (-140 + 420 * i, 901),
                                             mask=artifact_preview_mask)
          else:
            concurrent.futures.ThreadPoolExecutor(
              os.cpu_count() * 99999).submit(artifact_preview_paste.paste,
                                             artifact_preview,
                                             (-35 + 420 * i, 916),
                                             mask=artifact_preview_mask)
          BaseImage = Image.alpha_composite(BaseImage, artifact_preview_paste)
          DR = ImageDraw.Draw(BaseImage)
          MainOption = artifact_details['mainoption'][
            'optionName']  # 聖遺物のメインオプションを取得
          try:
            MainOptionLen = DR.textlength(
              OptionMap[MainOption] or MainOption,
              font=artifact_font(29))  # 聖遺物のメインオプションの文字長を計算
          except:
            MainOptionLen = DR.textlength(
              MainOption, font=artifact_font(29))  # 聖遺物のメインオプションの文字長を計算
          try:
            DR.text((375 + i * 373 - int(MainOptionLen), 941),
                    OptionMap[MainOption] or MainOption,
                    font=artifact_font(29))  # メインオプションを書き込み
          except:
            DR.text((375 + i * 373 - int(MainOptionLen), 941),
                    MainOption,
                    font=artifact_font(29))  # メインオプションを書き込み
          MainOption_icon = Image.open(
            io.BytesIO(
              self.artifact_emotes(unicodedata.normalize(
                'NFKC', MainOption)))).convert('RGBA').resize(
                  (35, 35))  # メインオプションのアイコンを取得
          MainOption_icon_mask = MainOption_icon.copy(
          )  # メインオプションのアイコンのマスクを作成
          BaseImage.paste(MainOption_icon,
                          (335 + i * 373 - int(MainOptionLen), 941),
                          mask=MainOption_icon_mask)
          MainOptionValue = artifact_details['mainoption']['value']
          if MainOption in Disper:
            MainOptionValueSize = DR.textlength(
              '{}%'.format(float(MainOptionValue)), artifact_font(49))
            DR.text((375 + i * 373 - MainOptionValueSize, 971),
                    '{}%'.format(float(MainOptionValue)),
                    font=artifact_font(49))
          else:
            MainOptionValueSize = DR.textlength(format(MainOptionValue, ","),
                                                artifact_font(49))
            DR.text((375 + i * 373 - MainOptionValueSize, 971),
                    format(MainOptionValue, ","),
                    font=artifact_font(49))
          artifactLevelLen = DR.textlength('+{}'.format(
            artifact_details['level']), artifact_font(21))  # 聖遺物のレベルの文字の長さを計算
          DR.rounded_rectangle(
            (373 + i * 373 - int(artifactLevelLen), 1023, 375 + i * 373, 771),
            radius=0,
            outline=None,
            width=0)
          DR.text((374 + i * 373 - artifactLevelLen, 1024),
                  '+{}'.format(artifact_details['level']),
                  font=artifact_font(21))  # 聖遺物のレベルを記載
          if artifact_details['level'] == 20 and artifact_details[
              'rarelity'] == 5:  # 聖遺物のレベルが20でかつレアリティが5なら以下を実行
            art_c_data = {}
            for art in artifact_details['suboption']:  # サブオプションの計算
              if art['optionName'] in Disper:
                art_c_data[art['optionName']] = '{}'.format(float(
                  art['value']))
              else:
                art_c_data[art['optionName']] = '{}'.format(art['value'])
            PSB = self.option_calculation(art_c_data)
          if len(artifact_details['suboption']) == 0:
            continue
          for a, arts in enumerate(artifact_details['suboption']):
            artifact_suboption = arts['optionName']
            artifact_subvalue = arts['value']
            if artifact_suboption in ['HP', '攻撃力', '防御力']:
              try:
                DR.text((79 + 373 * i, 1109 + 50 * a),
                        OptionMap[artifact_suboption] or artifact_suboption,
                        font=artifact_font(25),
                        fill=(255, 255, 255, 190))
              except:
                DR.text((79 + 373 * i, 1109 + 50 * a),
                        artifact_suboption,
                        font=artifact_font(25),
                        fill=(255, 255, 255, 190))
            else:
              try:
                DR.text((79 + 373 * i, 1109 + 50 * a),
                        OptionMap[artifact_suboption] or artifact_suboption,
                        font=artifact_font(25))
              except:
                DR.text((79 + 373 * i, 1109 + 50 * a),
                        artifact_suboption,
                        font=artifact_font(25))
            artifact_suboption_icon = Image.open(
              io.BytesIO(
                self.artifact_emotes(
                  unicodedata.normalize(
                    'NFKC', artifact_suboption)))).convert('RGBA').resize(
                      (30, 30))
            artifact_suboption_icon_mask = artifact_suboption_icon.copy()
            BaseImage.paste(artifact_suboption_icon,
                            (44 + 373 * i, 1109 + 50 * a),
                            mask=artifact_suboption_icon_mask)
            if artifact_suboption in Disper:
              artifact_suboption_size = DR.textlength(
                '{}%'.format(float(artifact_subvalue)), artifact_font(25))
              DR.text((375 + i * 373 - artifact_suboption_size, 1109 + 50 * a),
                      '{}%'.format(float(artifact_subvalue)),
                      font=artifact_font(25))
            else:
              artifact_suboption_size = DR.textlength(
                format(artifact_subvalue, ","), artifact_font(25))
              if artifact_suboption in ['防御力', '攻撃力', 'HP']:
                DR.text(
                  (375 + i * 373 - artifact_suboption_size, 1109 + 50 * a),
                  format(artifact_subvalue, ","),
                  font=artifact_font(25),
                  fill=(255, 255, 255, 190))
              else:
                DR.text(
                  (375 + i * 373 - artifact_suboption_size, 1109 + 50 * a),
                  format(artifact_subvalue, ","),
                  font=artifact_font(25),
                  fill=(255, 255, 255))
            if artifact_details['level'] == 20 and artifact_details[
                'rarelity'] == 5:  # 聖遺物のレベルが20でかつレアリティが5なら以下を実行
              artifact_stretch = DR.textlength("+".join(map(str, PSB[a])),
                                               font=artifact_font(11))
              DR.text((375 + i * 373 - artifact_stretch, 1142 + 50 * a),
                      "+".join(map(str, PSB[a])),
                      fill=(255, 255, 255, 160),
                      font=artifact_font(11))
          artifactsScore = float(artifacts_score[part])  # 各聖遺物のスコア
          artifactsScoreLen = DR.textlength(str(artifactsScore),
                                            artifact_font(36))
          DR.text((298 + i * 373 - artifactsScoreLen, 1350),
                  str(artifactsScore),
                  font=artifact_font(36))
          DR.text((211 + i * 373 - artifactsScoreLen, 1358),
                  'Score',
                  font=artifact_font(27),
                  fill=(160, 160, 160))
          PRefer = {
            'total': {
              'SS': 220,
              'S': 200,
              'A': 180
            },
            'flower': {
              'SS': 50,
              'S': 45,
              'A': 40
            },
            'wing': {
              'SS': 50,
              'S': 45,
              'A': 40
            },
            'clock': {
              'SS': 45,
              'S': 40,
              'A': 35
            },
            'cup': {
              'SS': 45,
              'S': 40,
              'A': 37
            },
            'crown': {
              'SS': 40,
              'S': 35,
              'A': 30
            }
          }
          if artifactsScore >= PRefer[part]['SS']:
            artifact_score_image = Image.open(
              io.BytesIO(self.artifact_grades('SS')))
          elif artifactsScore >= PRefer[part]['S']:
            artifact_score_image = Image.open(
              io.BytesIO(self.artifact_grades('S')))
          elif artifactsScore >= PRefer[part]['A']:
            artifact_score_image = Image.open(
              io.BytesIO(self.artifact_grades('A')))
          else:
            artifact_score_image = Image.open(
              io.BytesIO(self.artifact_grades('B')))
          artifact_score_image = artifact_score_image.convert('RGBA').resize(
            (artifact_score_image.width // 11,
             artifact_score_image.height // 11))
          artifact_score_image_mask = artifact_score_image.copy()
          BaseImage.paste(artifact_score_image, (75 + 373 * i, 1352),
                          mask=artifact_score_image_mask)
      artifact_set_bouns = Counter(
        [x for x in ArtifactType if ArtifactType.count(x) >= 2])
      for i, (n, q) in enumerate(artifact_set_bouns.items()):
        if len(artifact_set_bouns) == 2:
          DR.text((1340, 810 + i * 33),
                  n,
                  fill=(0, 255, 0),
                  font=artifact_font(23))
          DR.text((1605, 807 + i * 33), '{}'.format(q), font=artifact_font(30))
        elif len(artifact_set_bouns) == 1:
          DR.text((1340, 828), n, fill=(0, 255, 0), font=artifact_font(23))
          DR.text((1605, 826), '{}'.format(q), font=artifact_font(30))
      os.makedirs(os.path.join(os.getcwd(), 'ArtifacterImageOutput'),
                  exist_ok=True)

      BaseImage.save(
        os.path.join(os.getcwd(), 'ArtifacterImageOutput', 'buildcard.png'))
      '''
      import console  # will delete
      concurrent.futures.ThreadPoolExecutor().submit(
        console.quicklook,
        os.path.join(os.getcwd(), 'ArtifacterImageOutput',
                     'buildcard.png'))  # will delete
      '''

  def main(self):
    if len(self.uid) == 9:  # UIDが9桁なら
      player_info = self.playerinfo()  # プレイヤー情報を取得
      if 'showAvatarInfoList' in player_info:
        try:  # アイコンデータを取得。エラーなら違う方式で読み込み
          icon_data = urllib.request.urlopen(
            urllib.request.Request('https://enka.network/ui/{}.png'.format(
              self.character_pfps_json()['{}'.format(
                self.playerinfo()['profilePicture']['id'])]
              ['iconPath'].replace('_Circle', '')),
                                   headers={'User-Agent': UsrAgn})).read()
        except:
          icon_data = urllib.request.urlopen(
            urllib.request.Request('https://enka.network/ui/{}'.format(
              '{}.png'.format(self.characters_json['{}'.format(
                self.playerinfo()['profilePicture']['avatarId'])]
                              ['SideIconName'].replace('UI_AvatarIcon_Side_',
                                                       'UI_AvatarIcon_'))),
                                   headers={'User-Agent': UsrAgn})).read()

        self.png_data = icon_data
        self.UserName = player_info['nickname']
        self.WorldLank = player_info['level']

        avatar_lists = player_info['showAvatarInfoList']
        # todo: table にicon 出したいならここ
        self.name_level_list = [{
          'name': _avatar['name'],
          'level': _avatar['level'],
          'avatarId': _avatar['avatarId'],
        } for _avatar in avatar_lists]

  def start_buildcrate(self, data, score_state):
    self.create_buildcard(data, score_state)


# --- navigation
UINavigationController = ObjCClass('UINavigationController')
UINavigationBarAppearance = ObjCClass('UINavigationBarAppearance')
UIBarButtonItem = ObjCClass('UIBarButtonItem')

# --- viewController
UIViewController = ObjCClass('UIViewController')


class NavigationController:

  def __init__(self):
    self._navigationController: UINavigationController

  def _override_navigationController(self):
    # --- `UINavigationController` Methods
    def doneButtonTapped_(_self, _cmd, _sender):
      """(自身の)アプリケーション終了
      `NavigationController` から生やした`done_btn` ボタンのアクション
      
      """
      this = ObjCInstance(_self)
      visibleViewController = this.visibleViewController()
      visibleViewController.dismissViewControllerAnimated_completion_(
        True, None)

    # --- `UINavigationController` set up
    _methods = [
      doneButtonTapped_,
    ]

    create_kwargs = {
      'name': '_nv',
      'superclass': UINavigationController,
      'methods': _methods,
    }
    _nv = create_objc_class(**create_kwargs)
    self._navigationController = _nv

  def create_navigationControllerDelegate(self):
    # --- `UINavigationControllerDelegate` Methods
    def navigationController_willShowViewController_animated_(
        _self, _cmd, _navigationController, _viewController, _animated):

      navigationController = ObjCInstance(_navigationController)
      viewController = ObjCInstance(_viewController)

      # --- appearance
      appearance = UINavigationBarAppearance.alloc()
      appearance.configureWithDefaultBackground()

      # --- navigationBar
      navigationBar = navigationController.navigationBar()

      navigationBar.standardAppearance = appearance
      navigationBar.scrollEdgeAppearance = appearance
      navigationBar.compactAppearance = appearance
      navigationBar.compactScrollEdgeAppearance = appearance

      viewController.setEdgesForExtendedLayout_(0)

      done_btn = UIBarButtonItem.alloc(
      ).initWithBarButtonSystemItem_target_action_(0, navigationController,
                                                   sel('doneButtonTapped:'))

      visibleViewController = navigationController.visibleViewController()

      # --- navigationItem
      navigationItem = visibleViewController.navigationItem()

      navigationItem.rightBarButtonItem = done_btn

    # --- `UINavigationControllerDelegate` set up
    _methods = [
      navigationController_willShowViewController_animated_,
    ]
    _protocols = [
      'UINavigationControllerDelegate',
    ]

    create_kwargs = {
      'name': '_nvDelegate',
      'methods': _methods,
      'protocols': _protocols,
    }
    _nvDelegate = create_objc_class(**create_kwargs)
    return _nvDelegate.new()

  @on_main_thread
  def _init(self, vc: UIViewController):
    self._override_navigationController()
    _delegate = self.create_navigationControllerDelegate()
    nv = self._navigationController.alloc()
    nv.initWithRootViewController_(vc).autorelease()
    nv.setDelegate_(_delegate)
    return nv

  @classmethod
  def new(cls, vc: UIViewController) -> ObjCInstance:
    _cls = cls()
    return _cls._init(vc)


class _ViewController:

  def __init__(self, *args, **kwargs):
    self._msgs: list['def'] = []  # xxx: 型ちゃんとやる
    self._viewController: UIViewController
    self.override()

  def override(self):
    # todo: objc で特別にmethod 生やしたいときなど
    pass

  def add_msg(self, msg):
    if not (hasattr(self, '_msgs')):
      self._msgs: list['def'] = []
    self._msgs.append(msg)

  def didLoad(self, this: UIViewController):
    pass

  def willAppear(self, this: UIViewController, animated: bool):
    pass

  def willLayoutSubviews(self, this: UIViewController):
    pass

  def didLayoutSubviews(self, this: UIViewController):
    pass

  def didAppear(self, this: UIViewController, animated: bool):
    pass

  def willDisappear(self, this: UIViewController, animated: bool):
    pass

  def didDisappear(self, this: UIViewController, animated: bool):
    pass

  def _override_viewController(self):
    # --- `UIViewController` Methods
    def viewDidLoad(_self, _cmd):
      this = ObjCInstance(_self)
      self.didLoad(this)

    def viewWillAppear_(_self, _cmd, animated):
      this = ObjCInstance(_self)
      self.willAppear(this, animated)

    def viewWillLayoutSubviews(_self, _cmd):
      this = ObjCInstance(_self)
      self.willLayoutSubviews(this)

    def viewDidLayoutSubviews(_self, _cmd):
      this = ObjCInstance(_self)
      self.didLayoutSubviews(this)

    def viewDidAppear_(_self, _cmd, animated):
      this = ObjCInstance(_self)
      self.didAppear(this, animated)

    def viewWillDisappear_(_self, _cmd, animated):
      this = ObjCInstance(_self)
      self.willDisappear(this, animated)

    def viewDidDisappear_(_self, _cmd, animated):
      this = ObjCInstance(_self)
      self.didDisappear(this, animated)

    # --- `UIViewController` set up
    _methods = [
      viewDidLoad,
      viewWillAppear_,
      viewWillLayoutSubviews,
      viewDidLayoutSubviews,
      viewDidAppear_,
      viewWillDisappear_,
      viewDidDisappear_,
    ]

    if self._msgs: _methods.extend(self._msgs)

    create_kwargs = {
      'name': '_vc',
      'superclass': UIViewController,
      'methods': _methods,
    }
    _vc = create_objc_class(**create_kwargs)
    self._viewController = _vc

  def _init(self):
    self._override_viewController()
    vc = self._viewController.new().autorelease()
    return vc

  @classmethod
  def new(cls, *args, **kwargs) -> ObjCInstance:
    _cls = cls(*args, **kwargs)
    return _cls._init()


@on_main_thread
def present_objc(vc):
  app = ObjCClass('UIApplication').sharedApplication()
  window = app.keyWindow() if app.keyWindow() else app.windows().firstObject()

  root_vc = window.rootViewController()

  while root_vc.presentedViewController():
    root_vc = root_vc.presentedViewController()

  vc.setModalPresentationStyle(0)
  root_vc.presentViewController_animated_completion_(vc, True, None)


### ### ###
# --- view

UIView = ObjCClass('UIView')
NSLayoutConstraint = ObjCClass('NSLayoutConstraint')
UIColor = ObjCClass('UIColor')

UIImage = ObjCClass('UIImage')
UIImageView = ObjCClass('UIImageView')
#[UIView.ContentMode | Apple Developer Documentation](https://developer.apple.com/documentation/uikit/uiview/contentmode)
scaleAspectFit = 1

UILabel = ObjCClass('UILabel')
NSTextAlignmentCenter = 1
UITextField = ObjCClass('UITextField')
UITextFieldViewModeAlways = 3

UIKeyboardTypeDefault = 0
UIKeyboardTypeNumbersAndPunctuation = 2
UIKeyboardTypeNumberPad = 4
UIKeyboardTypeASCIICapableNumberPad = 11
UIReturnKeySearch = 6

NSAttributedString = ObjCClass('NSAttributedString')

UIFont = ObjCClass('UIFont')

UIScrollView = ObjCClass('UIScrollView')

UISwitch = ObjCClass('UISwitch')

UIButton = ObjCClass('UIButton')
UIButtonConfiguration = ObjCClass('UIButtonConfiguration')
UIControlEventTouchUpInside = 1 << 6
UIControlEventValueChanged = 1 << 12

UIStackView = ObjCClass('UIStackView')
UILayoutConstraintAxisHorizontal = 0
UILayoutConstraintAxisVertical = 1

UIStackViewAlignmentFill = 0
UIStackViewAlignmentLeading = 1
UIStackViewAlignmentFirstBaseline = 2
UIStackViewAlignmentCenter = 3
UIStackViewAlignmentTrailing = 4
UIStackViewAlignmentLastBaseline = 5
UIStackViewAlignmentTop = UIStackViewAlignmentLeading
UIStackViewAlignmentBottom = UIStackViewAlignmentTrailing

UIStackViewDistributionFill = 0
UIStackViewDistributionFillEqually = 1
UIStackViewDistributionFillProportionally = 2
UIStackViewDistributionEqualSpacing = 3
UIStackViewDistributionEqualCentering = 4

UITableView = ObjCClass('UITableView')
UITableViewStylePlain = 0

UITableViewCell = ObjCClass('UITableViewCell')
UITableViewCellStyleDefault = 0
UITableViewCellStyleValue1 = 1
UITableViewCellStyleValue2 = 2
UITableViewCellStyleSubtitle = 3

pageSheet = 1

UISheetPresentationControllerDetent = ObjCClass(
  'UISheetPresentationControllerDetent')

largeDetent = UISheetPresentationControllerDetent.largeDetent()
mediumDetent = UISheetPresentationControllerDetent.mediumDetent()


class ObjcView:

  def __init__(self, *args, **kwargs):
    self.instance = UIView.alloc()
    CGRectZero = CGRect((0.0, 0.0), (0.0, 0.0))
    self.instance.initWithFrame_(CGRectZero)

  def _init(self):

    if IS_LAYOUT_DEBUG:
      color = UIColor.systemRedColor()
      self.instance.layer().setBorderWidth_(1.0)
      self.instance.layer().setBorderColor_(color.cgColor())
    self.instance.setTranslatesAutoresizingMaskIntoConstraints_(False)

    return self.instance

  @classmethod
  def new(cls, *args, **kwargs) -> ObjCInstance:
    _cls = cls(*args, **kwargs)
    return _cls._init()


class ObjcStackView(ObjcView):

  def __init__(self, *args, **kwargs):
    super().__init__(*args, **kwargs)
    self.instance = UIStackView.alloc()
    CGRectZero = CGRect((0.0, 0.0), (0.0, 0.0))
    self.instance.initWithFrame_(CGRectZero)


class ObjcImageView(ObjcView):

  def __init__(self, *args, **kwargs):
    super().__init__(*args, **kwargs)
    self.instance = UIImageView.alloc().initWithImage_(kwargs['image'])


class ObjcLabel(ObjcView):

  def __init__(self, *args, **kwargs):
    super().__init__(*args, **kwargs)
    self.instance = UILabel.new()
    self.instance.setText_(kwargs['text'])
    self.instance.sizeToFit()


class ObjcTextField(ObjcView):

  def __init__(self, *args, **kwargs):
    super().__init__(*args, **kwargs)
    self.instance = UITextField.new()


class ObjcTableView(ObjcView):

  def __init__(self, *args, **kwargs):
    self.instance = UITableView.alloc()
    CGRectZero = CGRect((0.0, 0.0), (0.0, 0.0))
    style = kwargs['style'] if kwargs['style'] else UITableViewStylePlain
    self.instance.initWithFrame_style_(CGRectZero, style)


class ObjcSwitch(ObjcView):

  def __init__(self, *args, **kwargs):
    super().__init__(*args, **kwargs)
    self.instance = UISwitch.new()


class ObjcButton(ObjcView):

  def __init__(self, *args, **kwargs):
    super().__init__(*args, **kwargs)
    self.instance = UIButton.new()
    title = kwargs['title']
    config = UIButtonConfiguration.tintedButtonConfiguration()
    config.setTitle_(title)
    config.setBaseBackgroundColor_(UIColor.systemPinkColor())
    config.setBaseForegroundColor_(UIColor.systemGreenColor())

    self.instance.setConfiguration_(config)


###
# --- TopViewController
###


class TopViewController(_ViewController):

  def __init__(self, *args, **kwargs):
    super().__init__(*args, **kwargs)
    self.nav_title = kwargs['name']

    self.artifacter: Artifacter

    self.table_itemlist = []
    self.select_table = {}
    self.select_switch = ''

  def create_textField_delegate(self):
    # --- `UITextFieldDelegate` Methods
    def textFieldShouldReturn_(_self, _cmd, _textField):
      textField = ObjCInstance(_textField)
      textField.resignFirstResponder()

      # todo: UID 検索
      # xxx: 入力のエラーハンドリング、
      # xxx:popup でフィードバックとか
      input_text = textField.text()
      self.artifacter = Artifacter(str(input_text))
      # xxx: ↓ `Artifacter` のinit に押し込めてる
      #ThreadPoolExecutor().submit(self.artifacter.main)

      nickname = self.artifacter.UserName
      level = self.artifacter.WorldLank
      self.username_value_label.setText_(nickname)
      self.worldrank_value_label.setText_(str(level))

      icon_img = UIImage.imageWithData_(self.artifacter.png_data)
      self.header_icon.setImage_(icon_img)

      # todo: table
      self.table_itemlist = self.artifacter.name_level_list
      self.tableView.reloadData()

      return True

    # --- `UITextFieldDelegate` set up
    _methods = [
      textFieldShouldReturn_,
    ]
    _protocols = [
      'UITextFieldDelegate',
    ]

    create_kwargs = {
      'name': 'textField_delegate',
      'methods': _methods,
      'protocols': _protocols,
    }

    textField_delegate = create_objc_class(**create_kwargs)
    return textField_delegate.new()

  def create_table_extensions(self):
    # --- `UITableViewDataSource` Methods
    def tableView_numberOfRowsInSection_(_self, _cmd, _tableView, _section):
      len_row = len(self.table_itemlist) if self.table_itemlist else 1
      return len_row

    def tableView_cellForRowAtIndexPath_(_self, _cmd, _tableView, _indexPath):
      tableView = ObjCInstance(_tableView)
      indexPath = ObjCInstance(_indexPath)

      cell = UITableViewCell.alloc().initWithStyle_reuseIdentifier_(
        UITableViewCellStyleValue1, self.cell_identifier)

      if self.table_itemlist:
        item = self.table_itemlist[indexPath.pt_row()]
        name = item['name']
        level = item['level']
        main_text = name
        secondary_text = f'LV: {level}'

      else:
        main_text = 'UID を検索してください'
        secondary_text = ''

      content = cell.defaultContentConfiguration()
      content.textProperties().setNumberOfLines_(1)
      content.setText_(main_text)
      content.setSecondaryText_(secondary_text)

      cell.setContentConfiguration_(content)

      content = cell.defaultContentConfiguration()
      return cell.ptr

    def numberOfSectionsInTableView_(_self, _cmd, _tableView):
      # xxx: とりあえずの`1`
      return 1

    # --- `UITableViewDelegate` Methods
    def tableView_didSelectRowAtIndexPath_(_self, _cmd, _tableView,
                                           _indexPath):
      indexPath = ObjCInstance(_indexPath)
      self.select_table = self.table_itemlist[indexPath.pt_row()]
      #print(self.select_table)

    # --- `UITableViewDataSource` & `UITableViewDelegate` set up
    _methods = [
      tableView_numberOfRowsInSection_,
      tableView_cellForRowAtIndexPath_,
      numberOfSectionsInTableView_,
      tableView_didSelectRowAtIndexPath_,
    ]
    _protocols = [
      'UITableViewDataSource',
      'UITableViewDelegate',
    ]

    create_kwargs = {
      'name': 'table_extensions',
      'methods': _methods,
      'protocols': _protocols,
    }

    table_extensions = create_objc_class(**create_kwargs)
    return table_extensions.new()

  def override(self):

    @self.add_msg
    def btnClick_(_self, _cmd, _sender):
      this = ObjCInstance(_self)
      sender = ObjCInstance(_sender)
      if self.table_itemlist and self.select_table and self.select_switch:
        avatar_id = self.select_table['avatarId']
        data = self.artifacter.full_playerinfo(avatar_id)
        score_state = self.select_switch.replace('力', '')

        self.artifacter.start_buildcrate(data, score_state)
        svc = BuildcardViewController.new(name='Buildcard')

        sheet = svc.sheetPresentationController()
        #pdbg.state(sheet)
        sheet.setDetents_([mediumDetent, largeDetent])
        sheet.setPrefersGrabberVisible_(True)
        navigationController = this.navigationController()
        navigationController.presentViewController_animated_completion_(
          svc, True, None)
      else:
        print('全て選択できてない警告')

    @self.add_msg
    def changeSwitch_(_self, _cmd, _sender):
      this = ObjCInstance(_self)
      sender = ObjCInstance(_sender)
      # todo: Button 非活性とか、他選択連携
      if sender.isOn():
        for switch in self.switches:
          switch['obj'].setOn_animated_(False, True)
          if switch['obj'] is sender:
            self.select_switch = switch['score']
        sender.setOn_animated_(True, True)
      else:
        self.select_switch = ''

    @self.add_msg
    def setupHeaderStack(_self, _cmd):
      # xxx: `return` 調べてないので`self` で全体的に持つ
      this = ObjCInstance(_self)
      view = this.view()
      # --- stack init
      self.header_stack = ObjcStackView.new()
      self.header_stack.setAxis_(UILayoutConstraintAxisHorizontal)
      self.header_stack.setAlignment_(UIStackViewAlignmentCenter)

      # --- stack items
      # xxx: 実行時path 環境で変化するかも
      fast_image_path = Path('./assets/ArtifacterBaseIcon.png')
      self.header_icon_img = UIImage.imageWithContentsOfFile_(
        str(fast_image_path))
      self.header_icon = ObjcImageView.new(image=self.header_icon_img)
      self.header_icon.setContentMode_(scaleAspectFit)

      self.header_label = ObjcLabel.new(text=self.nav_title)
      self.header_label.setTextAlignment_(NSTextAlignmentCenter)
      self.header_label.setFont_(UIFont.systemFontOfSize_(48.0))

      # --- layout
      self.header_stack.addArrangedSubview_(self.header_icon)
      self.header_stack.addArrangedSubview_(self.header_label)
      view.addSubview_(self.header_stack)

      layoutMarginsGuide = view.layoutMarginsGuide()

      NSLayoutConstraint.activateConstraints_([
        self.header_stack.leadingAnchor().constraintEqualToAnchor_(
          layoutMarginsGuide.leadingAnchor()),
        self.header_stack.trailingAnchor().constraintEqualToAnchor_(
          layoutMarginsGuide.trailingAnchor()),
        self.header_stack.widthAnchor().constraintEqualToAnchor_multiplier_(
          layoutMarginsGuide.widthAnchor(), 1.0),
        self.header_stack.heightAnchor().constraintEqualToConstant_(64.0),
        self.header_icon.widthAnchor().constraintEqualToAnchor_(
          self.header_stack.heightAnchor()),
        self.header_icon.heightAnchor().constraintEqualToAnchor_(
          self.header_stack.heightAnchor()),
      ])

    @self.add_msg
    def setupUIDStack(_self, _cmd):
      this = ObjCInstance(_self)
      view = this.view()
      # --- stack init
      self.uid_stack = ObjcStackView.new()
      self.uid_stack.setAxis_(UILayoutConstraintAxisHorizontal)
      self.uid_stack.setAlignment_(UIStackViewAlignmentFill)

      # --- stack items
      self.uid_label = ObjcLabel.new(text='UID:')
      self.uid_text_wrap = ObjcView.new()
      self.uid_text_wrap.layer().setCornerRadius_(16)
      #self.uid_text_wrap.setBackgroundColor_(UIColor.systemDarkGrayColor())
      self.uid_text_wrap.setBackgroundColor_(UIColor.systemGray3Color())

      self.uid_textfield = ObjcTextField.new()

      delegate = self.create_textField_delegate()
      self.uid_textfield.setDelegate_(delegate)

      self.uid_textfield.textInputTraits().setKeyboardType_(
        UIKeyboardTypeNumbersAndPunctuation)

      self.uid_textfield.textInputTraits().setReturnKeyType_(UIReturnKeySearch)

      placeholder = NSAttributedString.alloc().initWithString_(
        'input to UID ...')
      self.uid_textfield.setAttributedPlaceholder_(placeholder)
      self.uid_textfield.setClearButtonMode_(UITextFieldViewModeAlways)

      # --- layout
      self.uid_text_wrap.addSubview_(self.uid_textfield)

      self.uid_stack.addArrangedSubview_(self.uid_label)
      self.uid_stack.addArrangedSubview_(self.uid_text_wrap)

      view.addSubview_(self.uid_stack)

      layoutMarginsGuide = view.layoutMarginsGuide()
      NSLayoutConstraint.activateConstraints_([
        self.uid_stack.leadingAnchor().constraintEqualToAnchor_(
          layoutMarginsGuide.leadingAnchor()),
        self.uid_stack.trailingAnchor().constraintEqualToAnchor_(
          layoutMarginsGuide.trailingAnchor()),
        self.uid_stack.heightAnchor().constraintEqualToConstant_(32.0),
        self.uid_label.widthAnchor().constraintEqualToAnchor_multiplier_(
          self.uid_stack.widthAnchor(), 0.1),
        self.uid_text_wrap.widthAnchor().constraintEqualToAnchor_multiplier_(
          self.uid_stack.widthAnchor(), 0.86),
        self.uid_textfield.centerXAnchor().constraintEqualToAnchor_(
          self.uid_text_wrap.centerXAnchor()),
        self.uid_textfield.centerYAnchor().constraintEqualToAnchor_(
          self.uid_text_wrap.centerYAnchor()),
        self.uid_textfield.widthAnchor().constraintEqualToAnchor_constant_(
          self.uid_text_wrap.widthAnchor(), -32),
      ])

    @self.add_msg
    def setupUserRankStack(_self, _cmd):
      this = ObjCInstance(_self)
      view = this.view()

      # --- stack init
      self.userrank_stack = ObjcStackView.new()
      self.userrank_stack.setAxis_(UILayoutConstraintAxisHorizontal)
      self.userrank_stack.setDistribution_(UIStackViewDistributionEqualSpacing)

      self.userrank_stack.setAlignment_(UIStackViewAlignmentFill)

      # --- stack items
      font_size = UIFont.systemFontOfSize_(12.0)
      # --- leading
      leading_stack = ObjcStackView.new()
      leading_stack.setAxis_(UILayoutConstraintAxisHorizontal)
      leading_stack.setAlignment_(UIStackViewAlignmentFill)

      self.username_key_label = ObjcLabel.new(text='ユーザー名:')
      self.username_key_label.setFont_(font_size)
      self.username_value_label = ObjcLabel.new(text='')

      self.username_value_label.setFont_(font_size)
      leading_stack.addArrangedSubview_(self.username_key_label)
      leading_stack.addArrangedSubview_(self.username_value_label)

      # --- trailing

      trailing_stack = ObjcStackView.new()
      trailing_stack.setAxis_(UILayoutConstraintAxisHorizontal)
      trailing_stack.setAlignment_(UIStackViewAlignmentFill)

      self.worldrank_key_label = ObjcLabel.new(text='世界ランク:')
      self.worldrank_key_label.setFont_(font_size)

      #self.worldrank_value_label = ObjcLabel.new(text='60')
      self.worldrank_value_label = ObjcLabel.new(text='')
      self.worldrank_value_label.setFont_(font_size)

      trailing_stack.addArrangedSubview_(self.worldrank_key_label)
      trailing_stack.addArrangedSubview_(self.worldrank_value_label)

      # --- layout
      self.userrank_stack.addArrangedSubview(leading_stack)
      self.userrank_stack.addArrangedSubview(trailing_stack)
      view.addSubview_(self.userrank_stack)

      layoutMarginsGuide = view.layoutMarginsGuide()
      NSLayoutConstraint.activateConstraints_([
        self.userrank_stack.leadingAnchor().constraintEqualToAnchor_(
          layoutMarginsGuide.leadingAnchor()),
        self.userrank_stack.trailingAnchor().constraintEqualToAnchor_(
          layoutMarginsGuide.trailingAnchor()),
        self.userrank_stack.heightAnchor().constraintEqualToConstant_(32.0),
        leading_stack.widthAnchor().constraintEqualToAnchor_multiplier_(
          self.userrank_stack.widthAnchor(), 0.64),
        self.username_key_label.widthAnchor().
        constraintEqualToAnchor_multiplier_(leading_stack.widthAnchor(), 0.3),
        self.username_value_label.widthAnchor().
        constraintEqualToAnchor_multiplier_(leading_stack.widthAnchor(), 0.7),
        trailing_stack.widthAnchor().constraintEqualToAnchor_multiplier_(
          self.userrank_stack.widthAnchor(), 0.28),
        self.worldrank_key_label.widthAnchor(
        ).constraintEqualToAnchor_multiplier_(trailing_stack.widthAnchor(),
                                              0.64),
        self.worldrank_value_label.widthAnchor(
        ).constraintEqualToAnchor_multiplier_(trailing_stack.widthAnchor(),
                                              0.36),
      ])

    @self.add_msg
    def setupTableView(_self, _cmd):
      this = ObjCInstance(_self)
      view = this.view()
      self.cell_identifier: str = 'cell'
      self.table_extensions = self.create_table_extensions()

      self.tableView = ObjcTableView.new(style=UITableViewStylePlain)

      self.tableView.layer().setBorderWidth_(2.0)
      self.tableView.layer().setCornerRadius_(8)
      self.tableView.layer().setBorderColor_(
        UIColor.systemGray6Color().cgColor())
      self.tableView.registerClass_forCellReuseIdentifier_(
        UITableViewCell, self.cell_identifier)

      self.tableView.setDataSource(self.table_extensions)
      self.tableView.setDelegate(self.table_extensions)

      # --- layout
      view.addSubview_(self.tableView)
      layoutMarginsGuide = view.layoutMarginsGuide()
      NSLayoutConstraint.activateConstraints_([
        self.tableView.leadingAnchor().constraintEqualToAnchor_(
          layoutMarginsGuide.leadingAnchor()),
        self.tableView.trailingAnchor().constraintEqualToAnchor_(
          layoutMarginsGuide.trailingAnchor()),
        self.tableView.heightAnchor().constraintEqualToConstant_(128.0),
      ])

    @self.add_msg
    def setupSwitchStack(_self, _cmd):
      this = ObjCInstance(_self)
      view = this.view()
      self.switchStack = ObjcStackView.new()
      #self.switchStack.setAlignment_(UIStackViewAlignmentFill)
      self.switchStack.setAxis_(UILayoutConstraintAxisVertical)

      leading_stack = ObjcStackView.new()
      leading_stack.setAxis_(UILayoutConstraintAxisVertical)
      leading_stack.setAlignment_(UIStackViewAlignmentFill)
      leading_stack.setSpacing_(16.0)
      trailing_stack = ObjcStackView.new()
      trailing_stack.setAxis_(UILayoutConstraintAxisVertical)
      trailing_stack.setAlignment_(UIStackViewAlignmentFill)
      #trailing_stack.setSpacing_(16.0)

      scores = [
        'HP',
        '攻撃力',
        '防御力',
        'チャージ',
        '元素熟知',
      ]

      self.switches = [{
        'score': score,
        'obj': ObjcSwitch.new(),
      } for score in scores]

      font_size = UIFont.systemFontOfSize_(12.0)

      for n, switch_dict in enumerate(self.switches):
        _text = switch_dict['score']
        _switch = switch_dict['obj']
        _stack = ObjcStackView.new()
        _stack.setAxis_(UILayoutConstraintAxisHorizontal)
        #_stack.setAlignment_(UIStackViewAlignmentFill)
        _stack.setAlignment_(UIStackViewAlignmentCenter)

        #_stack.setSpacing_(16.0)
        _switch.addTarget_action_forControlEvents_(this, sel('changeSwitch:'),
                                                   UIControlEventValueChanged)

        _label = ObjcLabel.new(text=f'{_text}換算:')
        _label.setFont_(font_size)
        _stack.addArrangedSubview_(_label)
        _stack.addArrangedSubview_(_switch)
        NSLayoutConstraint.activateConstraints_([
          _stack.heightAnchor().constraintEqualToConstant_(32.0),
        ])
        leading_stack.addArrangedSubview_(
          _stack) if n < 3 else trailing_stack.addArrangedSubview_(_stack)

      wrap_stack = ObjcStackView.new()
      wrap_stack.setAxis_(UILayoutConstraintAxisHorizontal)
      wrap_stack.setAlignment_(UIStackViewAlignmentFill)
      #wrap_stack.setSpacing_(24.0)

      wrap_stack.addArrangedSubview_(leading_stack)
      wrap_stack.addArrangedSubview_(trailing_stack)

      computation_view = ObjcLabel.new(text='計算方式')
      self.switchStack.addArrangedSubview_(computation_view)
      self.switchStack.addArrangedSubview_(wrap_stack)
      view.addSubview_(self.switchStack)

      layoutMarginsGuide = view.layoutMarginsGuide()
      NSLayoutConstraint.activateConstraints_([
        self.switchStack.leadingAnchor().constraintEqualToAnchor_(
          layoutMarginsGuide.leadingAnchor()),
        self.switchStack.trailingAnchor().constraintEqualToAnchor_(
          layoutMarginsGuide.trailingAnchor()),
        leading_stack.widthAnchor().constraintEqualToAnchor_multiplier_(
          self.switchStack.widthAnchor(), 0.36),
        trailing_stack.widthAnchor().constraintEqualToAnchor_multiplier_(
          self.switchStack.widthAnchor(), 0.36),
      ])

    @self.add_msg
    def setupButton(_self, _cmd):
      this = ObjCInstance(_self)
      view = this.view()

      self.button_stack = ObjcStackView.new()
      self.make_button = ObjcButton.new(title='作成')
      self.make_button.addTarget_action_forControlEvents_(
        this, sel('btnClick:'), UIControlEventTouchUpInside)

      self.button_stack.addArrangedSubview_(self.make_button)
      view.addSubview_(self.button_stack)
      layoutMarginsGuide = view.layoutMarginsGuide()

      NSLayoutConstraint.activateConstraints_([
        self.button_stack.leadingAnchor().constraintEqualToAnchor_(
          layoutMarginsGuide.leadingAnchor()),
        self.button_stack.trailingAnchor().constraintEqualToAnchor_(
          layoutMarginsGuide.trailingAnchor()),
        self.button_stack.heightAnchor().constraintEqualToConstant_(64.0),
      ])

  def didLoad(self, this: UIViewController):
    view = this.view()
    navigationItem = this.navigationItem()
    navigationItem.setTitle_(self.nav_title)
    #view.setBackgroundColor_(UIColor.systemBlueColor())

    # --- view
    #self.main_stack = ObjcStackView.new()
    this.setupHeaderStack()
    this.setupUIDStack()
    this.setupUserRankStack()
    this.setupTableView()
    this.setupSwitchStack()
    this.setupButton()

    # --- layout

    views = [
      self.header_stack,
      self.uid_stack,
      self.userrank_stack,
      self.tableView,
      self.switchStack,
      self.button_stack,
    ]
    _pre_view = None
    activateConstraints = []
    for _view in views:
      if _pre_view:
        activateConstraints.append(
          _view.topAnchor().constraintEqualToAnchor_constant_(
            _pre_view.bottomAnchor(), 32.0))
      else:
        activateConstraints.append(_view.topAnchor().constraintEqualToAnchor_(
          view.topAnchor()))

      _pre_view = _view

    NSLayoutConstraint.activateConstraints_(activateConstraints)


class BuildcardViewController(_ViewController):

  def __init__(self, *args, **kwargs):
    super().__init__(*args, **kwargs)
    self.nav_title = kwargs['name']

  def didLoad(self, this: UIViewController):
    view = this.view()
    view.setBackgroundColor_(UIColor.systemGray6Color())

    navigationItem = this.navigationItem()
    navigationItem.setTitle_(self.nav_title)

    # --- view

    img_path = Path('./ArtifacterImageOutput/buildcard.png')
    card_img = UIImage.imageWithContentsOfFile_(str(img_path))
    self.card_view = ObjcImageView.new(image=card_img)
    self.card_view.setContentMode_(scaleAspectFit)

    # --- layout
    view.addSubview_(self.card_view)
    layoutMarginsGuide = view.layoutMarginsGuide()

    NSLayoutConstraint.activateConstraints_([
      self.card_view.topAnchor().constraintEqualToAnchor_(
        layoutMarginsGuide.topAnchor()),
      self.card_view.leadingAnchor().constraintEqualToAnchor_(
        layoutMarginsGuide.leadingAnchor()),
      self.card_view.trailingAnchor().constraintEqualToAnchor_(
        layoutMarginsGuide.trailingAnchor()),
      self.card_view.heightAnchor().constraintEqualToAnchor_multiplier_(
        view.heightAnchor(), 1.0),
    ])


if __name__ == '__main__':

  uid_path = Path('./uid.txt')
  UID = uid_path.read_text() if uid_path.exists() else ''

  is_ui = True
  #is_ui = False

  if is_ui:
    import clipboard

    clipboard.set(UID)

    IS_LAYOUT_DEBUG = True
    IS_LAYOUT_DEBUG = False
    top_name = 'Artifacter'
    fvc = TopViewController.new(name=top_name)
    nvc = NavigationController.new(fvc)
    present_objc(nvc)
  else:
    artifacter = Artifacter(UID)

